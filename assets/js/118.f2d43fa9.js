(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{437:function(s,t,a){"use strict";a.r(t);var v=a(11),_=Object(v.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"第四章-表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第四章-表达式"}},[s._v("#")]),s._v(" 第四章 表达式")]),s._v(" "),t("h2",{attrs:{id:"表达式基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表达式基础"}},[s._v("#")]),s._v(" 表达式基础")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("运算对象转换")]),s._v("：小整数类型会被提升为较大的整数类型")]),s._v(" "),t("li",[t("strong",[s._v("重载运算符")]),s._v("：当运算符作用在类类型的运算对象时，用户可以自行定义其含义。")]),s._v(" "),t("li",[t("strong",[s._v("左值和右值")]),s._v("：\n"),t("ul",[t("li",[s._v("C中原意：左值"),t("strong",[s._v("可以")]),s._v("在表达式左边，右值不能。")]),s._v(" "),t("li",[t("code",[s._v("C++")]),s._v("：当一个对象被用作"),t("strong",[s._v("右值")]),s._v("的时候，用的是对象的"),t("strong",[s._v("值")]),s._v("（内容）；")]),s._v(" "),t("li",[s._v("被用做"),t("strong",[s._v("左值")]),s._v("时，用的是对象的"),t("strong",[s._v("身份")]),s._v("（在内存中的位置）。")])])]),s._v(" "),t("li",[t("strong",[s._v("求值顺序")]),s._v("："),t("code",[s._v("int i = f1() + f2()")]),s._v(" "),t("ul",[t("li",[s._v("先计算"),t("code",[s._v("f1() + f2()")]),s._v(",再计算"),t("code",[s._v("int i = f1() + f2()")]),s._v("。但是f1和f2的计算"),t("strong",[s._v("先后不确定")])]),s._v(" "),t("li",[s._v("但是，如果f1、f2都对同一对象进行了修改，因为顺序不确定，所以会编译出错，显示未定义")])])])]),s._v(" "),t("h2",{attrs:{id:"算术运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[s._v("#")]),s._v(" 算术运算符")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("溢出")]),s._v("：当计算的结果超出该类型所能表示的范围时就会产生溢出。")]),s._v(" "),t("li",[t("strong",[s._v("bool类型不应该参与计算")]),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")]),s._v(" b2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//仍然为true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//b为true，提升为对应int=1，-b=-1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//b2=-1≠0，所以b2仍未true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])]),s._v(" "),t("li",[s._v("取余运算m%n，结果符号与m相同")])]),s._v(" "),t("h2",{attrs:{id:"逻辑运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[s._v("#")]),s._v(" 逻辑运算符")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("短路求值")]),s._v("：逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。"),t("strong",[s._v("先左再右")])]),s._v(" "),t("li",[s._v("小技巧，声明为引用类型可以避免对元素的拷贝，如下，如string特别大时可以节省大量时间。")])]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[s._v("vector"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" text"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("auto")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" text"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  cout"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"赋值运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[s._v("#")]),s._v(" 赋值运算符")]),s._v(" "),t("ul",[t("li",[s._v("赋值运算的"),t("strong",[s._v("返回结果时它的左侧运算对象")]),s._v("，且是一个左值。类型也就是左侧对象的类型。")]),s._v(" "),t("li",[s._v("如果赋值运算的左右侧运算对象类型不同，则右侧运算对象将转换成左侧运算对象的类型。")]),s._v(" "),t("li",[s._v("赋值运算符满足"),t("strong",[s._v("右结合律")]),s._v("，这点和其他二元运算符不一样。 "),t("code",[s._v("ival = jval = 0;")]),s._v("等价于"),t("code",[s._v("ival = (jval = 0);")])]),s._v(" "),t("li",[s._v("赋值运算优先级比较低，使用其当条件时应该加括号。")]),s._v(" "),t("li",[s._v("复合赋值运算符，"),t("strong",[s._v("复合运算符只求值一次")]),s._v("，普通运算符求值两次。（对性能有一点点点点影响）\n任意复合运算符op等价于"),t("code",[s._v("a = a op b;")])])]),s._v(" "),t("h2",{attrs:{id:"递增递减运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递增递减运算符"}},[s._v("#")]),s._v(" 递增递减运算符")]),s._v(" "),t("ul",[t("li",[s._v("前置版本"),t("code",[s._v("j = ++i")]),s._v("，先加一后赋值")]),s._v(" "),t("li",[s._v("后置版本"),t("code",[s._v("j = i++")]),s._v("，先赋值后加一")])]),s._v(" "),t("p",[t("strong",[s._v("优先使用前置")]),s._v("版本，后置多一步储存原始值。（除非需要变化前的值）")]),s._v(" "),t("h3",{attrs:{id:"混用解引用和递增运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#混用解引用和递增运算符"}},[s._v("#")]),s._v(" 混用解引用和递增运算符")]),s._v(" "),t("p",[t("code",[s._v("*iter++")]),s._v("等价于"),t("code",[s._v("*(iter++)")]),s._v("，递增优先级较高")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("auto iter = vi.begin();\nwhile (iter!=vi.end()&&*iter>=0)\n\tcout<<*iter++<<endl;\t// 输出当前值，指针向前移1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[t("strong",[s._v("简介是一种美德")]),s._v("，追求简洁能降低程序出错可能性")])]),s._v(" "),t("h2",{attrs:{id:"成员访问运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#成员访问运算符"}},[s._v("#")]),s._v(" 成员访问运算符")]),s._v(" "),t("p",[t("code",[s._v("ptr->mem")]),s._v("等价于"),t("code",[s._v("(*ptr).mem")])]),s._v(" "),t("p",[s._v("注意"),t("code",[s._v(".")]),s._v("运算符优先级大于"),t("code",[s._v("*")]),s._v("，所以记得加括号")]),s._v(" "),t("h2",{attrs:{id:"条件运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件运算符"}},[s._v("#")]),s._v(" 条件运算符")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("条件运算符（"),t("code",[s._v("?:")]),s._v("）允许我们把简单的"),t("code",[s._v("if-else")]),s._v("逻辑嵌入到单个表达式中去，按照如下形式："),t("code",[s._v("cond? expr1: expr2")])])]),s._v(" "),t("li",[t("p",[s._v("可以嵌套使用，"),t("strong",[s._v("右结合律")]),s._v("，从右向左顺序组合")]),s._v(" "),t("ul",[t("li",[t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('finalgrade = (grade > 90) ? "high pass"\n    : (grade < 60) ? "fail" : "pass";\n//等价于\nfinalgrade = (grade > 90) ? "high pass"\n    : （(grade < 60) ? "fail" : "pass"）;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])])])]),s._v(" "),t("li",[t("p",[s._v("输出表达式使用条件运算符记得加括号，条件运算符优先级太低。")])])]),s._v(" "),t("h2",{attrs:{id:"位运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[s._v("#")]),s._v(" 位运算符")]),s._v(" "),t("p",[s._v("用于检查和设置二进制位的功能。")]),s._v(" "),t("ul",[t("li",[s._v("位运算符是作用于"),t("strong",[s._v("整数类型")]),s._v("的运算对象。")]),s._v(" "),t("li",[s._v("二进制位向左移（"),t("code",[s._v("<<")]),s._v("）或者向右移（"),t("code",[s._v(">>")]),s._v("），移出边界外的位就被舍弃掉了。")]),s._v(" "),t("li",[s._v("位取反（"),t("code",[s._v("~")]),s._v("）（逐位求反）、与（"),t("code",[s._v("&")]),s._v("）、或（"),t("code",[s._v("|")]),s._v("）、异或（"),t("code",[s._v("^")]),s._v("）")])]),s._v(" "),t("p",[s._v("有符号数负值可能移位后变号，所以强烈建议"),t("strong",[s._v("位运算符仅用于无符号数")]),s._v("。")]),s._v(" "),t("p",[s._v("应用：")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("unsigned long quiz1 = 0;    // 每一位代表一个学生是否通过考试\n1UL << 12;  // 代表第12个学生通过\nquiz1 |= (1UL << 12);   // 将第12个学生置为已通过\nquiz1 &= ~(1UL << 12);  // 将第12个学生修改为未通过\nbool stu12 = quiz1 & (1UL << 12);   // 判断第12个学生是否通过\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("blockquote",[t("p",[s._v("位运算符使用较少，但是重载cout、cin大家都用过")])]),s._v(" "),t("p",[s._v("位运算符满足左结合律，优先级介于中间，使用时尽量加括号。")]),s._v(" "),t("h2",{attrs:{id:"sizeof运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sizeof运算符"}},[s._v("#")]),s._v(" sizeof运算符")]),s._v(" "),t("ul",[t("li",[s._v("返回一条表达式或一个类型名字所占的"),t("strong",[s._v("字节数")]),s._v("。")]),s._v(" "),t("li",[s._v("返回的类型是 "),t("code",[s._v("size_t")]),s._v("的常量表达式。")]),s._v(" "),t("li",[t("code",[s._v("sizeof")]),s._v("并不实际计算其运算对象的值。")]),s._v(" "),t("li",[s._v("两种形式：\n"),t("ol",[t("li",[t("code",[s._v("sizeof (type)")]),s._v("，给出类型名")]),s._v(" "),t("li",[t("code",[s._v("sizeof expr")]),s._v("，给出表达式")])])]),s._v(" "),t("li",[s._v("可用sizeof返回数组的大小")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int ia[10];\n// sizeof(ia)返回整个数组所占空间的大小\n// sizeof(ia)/sizeof(*ia)返回数组的大小\nconstexpr size_t sz = sizeof(ia)/sizeof(*ia);\nint arr[sz];\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"逗号运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逗号运算符"}},[s._v("#")]),s._v(" 逗号运算符")]),s._v(" "),t("p",[s._v("从左向右依次求值。")]),s._v(" "),t("p",[s._v("左侧求值结果丢弃，逗号运算符"),t("strong",[s._v("结果是右侧表达式")]),s._v("的值。")]),s._v(" "),t("h2",{attrs:{id:"类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[s._v("#")]),s._v(" 类型转换")]),s._v(" "),t("h3",{attrs:{id:"隐式类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[s._v("#")]),s._v(" 隐式类型转换")]),s._v(" "),t("blockquote",[t("p",[s._v("设计为尽可能避免损失精度，即转换为更精细类型。")])]),s._v(" "),t("ul",[t("li",[s._v("比 "),t("code",[s._v("int")]),s._v("类型小的整数值先提升为较大的整数类型。")]),s._v(" "),t("li",[s._v("条件中，非布尔转换成布尔。")]),s._v(" "),t("li",[s._v("初始化中，初始值转换成变量的类型。")]),s._v(" "),t("li",[s._v("算术运算或者关系运算的运算对象有多种类型，要转换成同一种类型。")]),s._v(" "),t("li",[s._v("函数调用时也会有转换。")])]),s._v(" "),t("h4",{attrs:{id:"算术转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算术转换"}},[s._v("#")]),s._v(" 算术转换")]),s._v(" "),t("h5",{attrs:{id:"整型提升"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整型提升"}},[s._v("#")]),s._v(" 整型提升")]),s._v(" "),t("ul",[t("li",[s._v("常见的char、bool、short能存在int就会转换成int，否则提升为"),t("code",[s._v("unsigned int")])]),s._v(" "),t("li",[t("code",[s._v("wchar_t,char16_t,char32_t")]),s._v("提升为整型中"),t("code",[s._v("int,long,long long ……")]),s._v("最小的，且能容纳原类型所有可能值的类型。")])]),s._v(" "),t("h4",{attrs:{id:"其他转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他转换"}},[s._v("#")]),s._v(" 其他转换")]),s._v(" "),t("blockquote",[t("p",[s._v("p143")])]),s._v(" "),t("h3",{attrs:{id:"显式类型转换（尽量避免）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显式类型转换（尽量避免）"}},[s._v("#")]),s._v(" 显式类型转换（尽量避免）")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("static_cast")]),s._v("：任何明确定义的类型转换，只要不包含底层const，都可以使用。 "),t("code",[s._v("double slope = static_cast<double>(j);")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("dynamic_cast")]),s._v("：支持运行时类型识别。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("const_cast")]),s._v("：只能改变运算对象的底层const，一般可用于去除const性质。 "),t("code",[s._v("const char *pc; char *p = const_cast<char*>(pc)")])]),s._v(" "),t("blockquote",[t("p",[s._v("只有其可以改变常量属性")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("reinterpret_cast")]),s._v("：通常为运算对象的位模式提供低层次上的重新解释。")])])]),s._v(" "),t("h4",{attrs:{id:"旧式强制类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#旧式强制类型转换"}},[s._v("#")]),s._v(" 旧式强制类型转换")]),s._v(" "),t("p",[t("code",[s._v("type expr")])]),s._v(" "),t("h2",{attrs:{id:"运算符优先级表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级表"}},[s._v("#")]),s._v(" 运算符优先级表")]),s._v(" "),t("blockquote",[t("p",[s._v("p147")])])])}),[],!1,null,null,null);t.default=_.exports}}]);