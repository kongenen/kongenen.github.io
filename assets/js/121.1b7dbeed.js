(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{439:function(_,v,t){"use strict";t.r(v);var e=t(11),s=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"第七章-类-（class）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第七章-类-（class）"}},[_._v("#")]),_._v(" 第七章 类 （Class）")]),_._v(" "),v("h2",{attrs:{id:"定义抽象数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定义抽象数据类型"}},[_._v("#")]),_._v(" 定义抽象数据类型")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("类背后的基本思想")]),_._v("："),v("strong",[_._v("数据抽象")]),_._v("（data abstraction）和"),v("strong",[_._v("封装")]),_._v("（encapsulation）。")]),_._v(" "),v("li",[_._v("数据抽象是一种依赖于"),v("strong",[_._v("接口")]),_._v("（interface）和"),v("strong",[_._v("实现")]),_._v("（implementation）分离的编程技术。")])]),_._v(" "),v("h3",{attrs:{id:"类成员-（member）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类成员-（member）"}},[_._v("#")]),_._v(" 类成员 （Member）")]),_._v(" "),v("ul",[v("li",[_._v("必须在类的内部声明，不能在其他地方增加成员。")]),_._v(" "),v("li",[_._v("成员可以是数据，函数，类型别名。")])]),_._v(" "),v("h3",{attrs:{id:"类的成员函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的成员函数"}},[_._v("#")]),_._v(" 类的成员函数")]),_._v(" "),v("ul",[v("li",[_._v("成员函数的"),v("strong",[_._v("声明")]),_._v("必须在类的内部。")]),_._v(" "),v("li",[_._v("成员函数的"),v("strong",[_._v("定义")]),_._v("既可以在类的内部也可以在外部。")]),_._v(" "),v("li",[_._v("使用点运算符 "),v("code",[_._v(".")]),_._v(" 调用成员函数。")]),_._v(" "),v("li",[_._v("必须对任何"),v("code",[_._v("const")]),_._v("或引用类型成员以及没有默认构造函数的类类型的任何成员使用初始化式。")]),_._v(" "),v("li",[v("code",[_._v("ConstRef::ConstRef(int ii): i(ii), ci(i), ri(ii) { }")])]),_._v(" "),v("li",[_._v("默认实参： "),v("code",[_._v("Sales_item(const std::string &book): isbn(book), units_sold(0), revenue(0.0) { }")])]),_._v(" "),v("li",[v("code",[_._v("*this")]),_._v("：\n"),v("ul",[v("li",[_._v("每个成员函数都有一个额外的，隐含的形参"),v("code",[_._v("this")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("this")]),_._v("总是指向当前对象，因此"),v("code",[_._v("this")]),_._v("是一个常量指针。")]),_._v(" "),v("li",[_._v("形参表后面的"),v("code",[_._v("const")]),_._v("，改变了隐含的"),v("code",[_._v("this")]),_._v("形参的类型，如 "),v("code",[_._v("bool same_isbn(const Sales_item &rhs) const")]),_._v("，这种函数称为“常量成员函数”（"),v("code",[_._v("this")]),_._v("指向的当前对象是常量）。")]),_._v(" "),v("li",[v("code",[_._v("return *this;")]),_._v("可以让成员函数连续调用。")]),_._v(" "),v("li",[_._v("普通的非"),v("code",[_._v("const")]),_._v("成员函数："),v("code",[_._v("this")]),_._v("是指向类类型的"),v("code",[_._v("const")]),_._v("指针（可以改变"),v("code",[_._v("this")]),_._v("所指向的值，不能改变"),v("code",[_._v("this")]),_._v("保存的地址）。")]),_._v(" "),v("li",[v("code",[_._v("const")]),_._v("成员函数："),v("code",[_._v("this")]),_._v("是指向const类类型的"),v("code",[_._v("const")]),_._v("指针（既不能改变"),v("code",[_._v("this")]),_._v("所指向的值，也不能改变"),v("code",[_._v("this")]),_._v("保存的地址）。")])])])]),_._v(" "),v("h3",{attrs:{id:"非成员函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非成员函数"}},[_._v("#")]),_._v(" 非成员函数")]),_._v(" "),v("ul",[v("li",[_._v("和类相关的非成员函数，定义和声明都应该在类的外部。")])]),_._v(" "),v("h3",{attrs:{id:"类的构造函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的构造函数"}},[_._v("#")]),_._v(" 类的构造函数")]),_._v(" "),v("ul",[v("li",[_._v("类通过一个或者几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做"),v("strong",[_._v("构造函数")]),_._v("。")]),_._v(" "),v("li",[_._v("构造函数是特殊的成员函数。")]),_._v(" "),v("li",[_._v("构造函数放在类的"),v("code",[_._v("public")]),_._v("部分。")]),_._v(" "),v("li",[_._v("与类同名的成员函数。")]),_._v(" "),v("li",[v("code",[_._v("Sales_item(): units_sold(0), revenue(0.0) { }")])]),_._v(" "),v("li",[v("code",[_._v("=default")]),_._v("要求编译器合成默认的构造函数。("),v("code",[_._v("C++11")]),_._v(")")]),_._v(" "),v("li",[_._v("初始化列表：冒号和花括号之间的代码： "),v("code",[_._v("Sales_item(): units_sold(0), revenue(0.0) { }")])])]),_._v(" "),v("h2",{attrs:{id:"访问控制与封装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#访问控制与封装"}},[_._v("#")]),_._v(" 访问控制与封装")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("访问说明符")]),_._v("（access specifiers）：\n"),v("ul",[v("li",[v("code",[_._v("public")]),_._v("：定义在 "),v("code",[_._v("public")]),_._v("后面的成员在整个程序内可以被访问； "),v("code",[_._v("public")]),_._v("成员定义类的接口。")]),_._v(" "),v("li",[v("code",[_._v("private")]),_._v("：定义在 "),v("code",[_._v("private")]),_._v("后面的成员可以被类的成员函数访问，但不能被使用该类的代码访问； "),v("code",[_._v("private")]),_._v("隐藏了类的实现细节。")])])]),_._v(" "),v("li",[_._v("使用 "),v("code",[_._v("class")]),_._v("或者 "),v("code",[_._v("struct")]),_._v("：都可以被用于定义一个类。唯一的却别在于访问权限。\n"),v("ul",[v("li",[_._v("使用 "),v("code",[_._v("class")]),_._v("：在第一个访问说明符之前的成员是 "),v("code",[_._v("priavte")]),_._v("的。")]),_._v(" "),v("li",[_._v("使用 "),v("code",[_._v("struct")]),_._v("：在第一个访问说明符之前的成员是 "),v("code",[_._v("public")]),_._v("的。")])])])]),_._v(" "),v("h3",{attrs:{id:"友元"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#友元"}},[_._v("#")]),_._v(" 友元")]),_._v(" "),v("ul",[v("li",[_._v("允许特定的"),v("strong",[_._v("非成员函数")]),_._v("访问一个类的"),v("strong",[_._v("私有成员")]),_._v(".")]),_._v(" "),v("li",[_._v("友元的声明以关键字 "),v("code",[_._v("friend")]),_._v("开始。 "),v("code",[_._v("friend Sales_data add(const Sales_data&, const Sales_data&);")]),_._v("表示非成员函数"),v("code",[_._v("add")]),_._v("可以访问类的非公有成员。")]),_._v(" "),v("li",[_._v("通常将友元声明成组地放在"),v("strong",[_._v("类定义的开始或者结尾")]),_._v("。")]),_._v(" "),v("li",[_._v("类之间的友元：\n"),v("ul",[v("li",[_._v("如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。")])])])]),_._v(" "),v("h3",{attrs:{id:"封装的益处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#封装的益处"}},[_._v("#")]),_._v(" 封装的益处")]),_._v(" "),v("ul",[v("li",[_._v("确保用户的代码不会无意间破坏封装对象的状态。")]),_._v(" "),v("li",[_._v("被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。")])]),_._v(" "),v("h2",{attrs:{id:"类的其他特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的其他特性"}},[_._v("#")]),_._v(" 类的其他特性")]),_._v(" "),v("ul",[v("li",[_._v("成员函数作为内联函数 "),v("code",[_._v("inline")]),_._v("：\n"),v("ul",[v("li",[_._v("在类的内部，常有一些规模较小的函数适合于被声明成内联函数。")]),_._v(" "),v("li",[v("strong",[_._v("定义")]),_._v("在类内部的函数是"),v("strong",[_._v("自动内联")]),_._v("的。")]),_._v(" "),v("li",[_._v("在类外部定义的成员函数，也可以在声明时显式地加上 "),v("code",[_._v("inline")]),_._v("。")])])]),_._v(" "),v("li",[v("strong",[_._v("可变数据成员")]),_._v(" （mutable data member）：\n"),v("ul",[v("li",[v("code",[_._v("mutable size_t access_ctr;")])]),_._v(" "),v("li",[_._v("永远不会是"),v("code",[_._v("const")]),_._v("，即使它是"),v("code",[_._v("const")]),_._v("对象的成员。")])])]),_._v(" "),v("li",[v("strong",[_._v("类类型")]),_._v("：\n"),v("ul",[v("li",[_._v("每个类定义了唯一的类型。")])])])]),_._v(" "),v("h2",{attrs:{id:"类的作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的作用域"}},[_._v("#")]),_._v(" 类的作用域")]),_._v(" "),v("ul",[v("li",[_._v("每个类都会定义它自己的作用域。在类的作用域之外，普通的数据和函数成员只能由引用、对象、指针使用成员访问运算符来访问。")]),_._v(" "),v("li",[_._v("函数的"),v("strong",[_._v("返回类型")]),_._v("通常在函数名前面，因此当成员函数定义在类的外部时，返回类型中使用的名字都位于类的作用域之外。")]),_._v(" "),v("li",[_._v("如果成员使用了外层作用域中的某个名字，而该名字代表一种"),v("strong",[_._v("类型")]),_._v("，则类不能在之后重新定义该名字。")]),_._v(" "),v("li",[_._v("类中的"),v("strong",[_._v("类型名定义")]),_._v("都要放在一开始。")])]),_._v(" "),v("h2",{attrs:{id:"构造函数再探"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#构造函数再探"}},[_._v("#")]),_._v(" 构造函数再探")]),_._v(" "),v("ul",[v("li",[_._v("构造函数初始值列表：\n"),v("ul",[v("li",[_._v("类似"),v("code",[_._v("python")]),_._v("使用赋值的方式有时候不行，比如"),v("code",[_._v("const")]),_._v("或者引用类型的数据，只能初始化，不能赋值。（注意初始化和赋值的区别）")]),_._v(" "),v("li",[_._v("最好让构造函数初始值的顺序和成员声明的顺序保持一致。")]),_._v(" "),v("li",[_._v("如果一个构造函数为所有参数都提供了默认参数，那么它实际上也定义了默认的构造函数。")])])])]),_._v(" "),v("h3",{attrs:{id:"委托构造函数-（delegating-constructor-c-11）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#委托构造函数-（delegating-constructor-c-11）"}},[_._v("#")]),_._v(" 委托构造函数 （delegating constructor, "),v("code",[_._v("C++11")]),_._v("）")]),_._v(" "),v("ul",[v("li",[_._v("委托构造函数将自己的职责委托给了其他构造函数。")]),_._v(" "),v("li",[v("code",[_._v('Sale_data(): Sale_data("", 0, 0) {}')])])]),_._v(" "),v("h3",{attrs:{id:"隐式的类型转换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#隐式的类型转换"}},[_._v("#")]),_._v(" 隐式的类型转换")]),_._v(" "),v("ul",[v("li",[_._v("如果构造函数"),v("strong",[_._v("只接受一个实参")]),_._v("，则它实际上定义了转换为此类类型的"),v("strong",[_._v("隐式转换机制")]),_._v("。这种构造函数又叫"),v("strong",[_._v("转换构造函数")]),_._v("（converting constructor）。")]),_._v(" "),v("li",[_._v("编译器只会自动地执行"),v("code",[_._v("仅一步")]),_._v("类型转换。")]),_._v(" "),v("li",[_._v("抑制构造函数定义的隐式转换：\n"),v("ul",[v("li",[_._v("将构造函数声明为"),v("code",[_._v("explicit")]),_._v("加以阻止。")]),_._v(" "),v("li",[v("code",[_._v("explicit")]),_._v("构造函数只能用于直接初始化，不能用于拷贝形式的初始化。")])])])]),_._v(" "),v("h3",{attrs:{id:"聚合类-（aggregate-class）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#聚合类-（aggregate-class）"}},[_._v("#")]),_._v(" 聚合类 （aggregate class）")]),_._v(" "),v("ul",[v("li",[_._v("满足以下所有条件：\n"),v("ul",[v("li",[_._v("所有成员都是"),v("code",[_._v("public")]),_._v("的。")]),_._v(" "),v("li",[_._v("没有定义任何构造函数。")]),_._v(" "),v("li",[_._v("没有类内初始值。")]),_._v(" "),v("li",[_._v("没有基类，也没有"),v("code",[_._v("virtual")]),_._v("函数。")])])]),_._v(" "),v("li",[_._v("可以使用一个花括号括起来的成员初始值列表，初始值的顺序必须和声明的顺序一致。")])]),_._v(" "),v("h3",{attrs:{id:"字面值常量类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字面值常量类"}},[_._v("#")]),_._v(" 字面值常量类")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("constexpr")]),_._v("函数的参数和返回值必须是字面值。")]),_._v(" "),v("li",[v("strong",[_._v("字面值类型")]),_._v("：除了算术类型、引用和指针外，某些类也是字面值类型。")]),_._v(" "),v("li",[_._v("数据成员都是字面值类型的聚合类是字面值常量类。")]),_._v(" "),v("li",[_._v("如果不是聚合类，则必须满足下面所有条件：\n"),v("ul",[v("li",[_._v("数据成员都必须是字面值类型。")]),_._v(" "),v("li",[_._v("类必须至少含有一个"),v("code",[_._v("constexpr")]),_._v("构造函数。")]),_._v(" "),v("li",[_._v("如果一个数据成员含有类内部初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的"),v("code",[_._v("constexpr")]),_._v("构造函数。")]),_._v(" "),v("li",[_._v("类必须使用析构函数的默认定义，该成员负责销毁类的对象。")])])])]),_._v(" "),v("h2",{attrs:{id:"类的静态成员"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类的静态成员"}},[_._v("#")]),_._v(" 类的静态成员")]),_._v(" "),v("ul",[v("li",[_._v("非"),v("code",[_._v("static")]),_._v("数据成员存在于类类型的每个对象中。")]),_._v(" "),v("li",[v("code",[_._v("static")]),_._v("数据成员独立于该类的任意对象而存在。")]),_._v(" "),v("li",[_._v("每个"),v("code",[_._v("static")]),_._v("数据成员是与类关联的对象，并不与该类的对象相关联。")]),_._v(" "),v("li",[_._v("声明：\n"),v("ul",[v("li",[_._v("声明之前加上关键词"),v("code",[_._v("static")]),_._v("。")])])]),_._v(" "),v("li",[_._v("使用：\n"),v("ul",[v("li",[_._v("使用"),v("strong",[_._v("作用域运算符")]),v("code",[_._v("::")]),_._v("直接访问静态成员:"),v("code",[_._v("r = Account::rate();")])]),_._v(" "),v("li",[_._v("也可以使用对象访问："),v("code",[_._v("r = ac.rate();")])])])]),_._v(" "),v("li",[_._v("定义：\n"),v("ul",[v("li",[_._v("在类外部定义时不用加"),v("code",[_._v("static")]),_._v("。")])])]),_._v(" "),v("li",[_._v("初始化：\n"),v("ul",[v("li",[_._v("通常不在类的内部初始化，而是在定义时进行初始化，如 "),v("code",[_._v("double Account::interestRate = initRate();")])]),_._v(" "),v("li",[_._v("如果一定要在类内部定义，则要求必须是字面值常量类型的"),v("code",[_._v("constexpr")]),_._v("。")])])])])])}),[],!1,null,null,null);v.default=s.exports}}]);