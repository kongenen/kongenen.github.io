(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{448:function(v,_,t){"use strict";t.r(_);var e=t(11),a=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"第十六章-模板和泛型编程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第十六章-模板和泛型编程"}},[v._v("#")]),v._v(" 第十六章 模板和泛型编程")]),v._v(" "),_("ul",[_("li",[v._v("面向对象编程和泛型编程都能处理在编写程序时不知道类型的情况。\n"),_("ul",[_("li",[v._v("OOP能处理类型在程序运行之前都未知的情况；")]),v._v(" "),_("li",[v._v("泛型编程中，在编译时就可以获知类型。")])])])]),v._v(" "),_("h2",{attrs:{id:"定义模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#定义模板"}},[v._v("#")]),v._v(" 定义模板")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("模板")]),v._v("：模板是泛型编程的基础。一个模板就是一个创建类或函数的蓝图或者说公式。")])]),v._v(" "),_("h3",{attrs:{id:"函数模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数模板"}},[v._v("#")]),v._v(" 函数模板")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("template <typename T> int compare(const T &v1, const T &v2){}")])]),v._v(" "),_("li",[v._v("模板定义以关键字 "),_("code",[v._v("template")]),v._v("开始，后接"),_("strong",[v._v("模板形参表")]),v._v("，模板形参表是用"),_("strong",[v._v("尖括号")]),_("code",[v._v("<>")]),v._v("括住的一个或多个"),_("strong",[v._v("模板形参")]),v._v("的列表，用逗号分隔，"),_("strong",[v._v("不能为空")]),v._v("。")]),v._v(" "),_("li",[v._v("使用模板时，我们显式或隐式地指定模板实参，将其绑定到模板参数上。")]),v._v(" "),_("li",[v._v("模板类型参数：类型参数前必须使用关键字"),_("code",[v._v("class")]),v._v("或者"),_("code",[v._v("typename")]),v._v("，这两个关键字含义相同，可以互换使用。旧的程序只能使用"),_("code",[v._v("class")]),v._v("。")]),v._v(" "),_("li",[v._v("非类型模板参数：表示一个值而非一个类型。实参必须是常量表达式。"),_("code",[v._v("template <class T, size_t N> void array_init(T (&parm)[N]){}")])]),v._v(" "),_("li",[v._v("内联函数模板： "),_("code",[v._v("template <typename T> inline T min(const T&, const T&);")])]),v._v(" "),_("li",[v._v("模板程序应该尽量减少对实参类型的要求。")]),v._v(" "),_("li",[v._v("函数模板和类模板成员函数的定义通常放在头文件中。")])]),v._v(" "),_("h3",{attrs:{id:"类模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类模板"}},[v._v("#")]),v._v(" 类模板")]),v._v(" "),_("ul",[_("li",[v._v("类模板用于生成类的蓝图。")]),v._v(" "),_("li",[v._v("不同于函数模板，编译器不能推断模板参数类型。")]),v._v(" "),_("li",[_("strong",[v._v("定义类模板")]),v._v("：\n"),_("ul",[_("li",[_("code",[v._v("template <class Type> class Queue {};")])])])]),v._v(" "),_("li",[v._v("实例化类模板：提供显式模板实参列表，来实例化出特定的类。")]),v._v(" "),_("li",[v._v("一个类模板中所有的实例都形成一个独立的类。")]),v._v(" "),_("li",[_("strong",[v._v("模板形参作用域")]),v._v("：模板形参的名字可以在声明为模板形参之后直到模板声明或定义的末尾处使用。")]),v._v(" "),_("li",[v._v("类模板的成员函数：\n"),_("ul",[_("li",[_("code",[v._v("template <typename T> ret-type Blob::member-name(parm-list)")])])])]),v._v(" "),_("li",[v._v("默认情况下，对于一个实例化了的类模板，其成员只有在使用时才被实例化。")]),v._v(" "),_("li",[v._v("新标准允许模板将自己的类型参数成为友元。"),_("code",[v._v("template <typename T> class Bar{friend T;};")]),v._v("。")]),v._v(" "),_("li",[v._v("模板类型别名：因为模板不是一个类型，因此无法定义一个"),_("code",[v._v("typedef")]),v._v("引用一个模板，但是新标准允许我们为类模板定义一个类型别名："),_("code",[v._v("template<typename T> using twin = pair<T, T>;")])])]),v._v(" "),_("h3",{attrs:{id:"模板参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模板参数"}},[v._v("#")]),v._v(" 模板参数")]),v._v(" "),_("ul",[_("li",[v._v("模板参数与作用域：一个模板参数名的可用范围是在声明之后，至模板声明或定义结束前。")]),v._v(" "),_("li",[v._v("一个特定文件所需要的所有模板的声明通常一起放置在文件开始位置。")]),v._v(" "),_("li",[v._v("当我们希望通知编译器一个名字表示类型时，必须使用关键字"),_("code",[v._v("typename")]),v._v("，而不能使用"),_("code",[v._v("class")]),v._v("。")]),v._v(" "),_("li",[v._v("默认模板实参："),_("code",[v._v("template <class T = int> class Numbers{}")])])]),v._v(" "),_("h3",{attrs:{id:"成员模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#成员模板"}},[v._v("#")]),v._v(" 成员模板")]),v._v(" "),_("ul",[_("li",[v._v("成员模板（member template）：本身是模板的函数成员。\n"),_("ul",[_("li",[v._v("普通（非模板）类的成员模板。")]),v._v(" "),_("li",[v._v("类模板的成员模板。")])])])]),v._v(" "),_("h3",{attrs:{id:"控制实例化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#控制实例化"}},[v._v("#")]),v._v(" 控制实例化")]),v._v(" "),_("ul",[_("li",[v._v("动机：在多个文件中实例化相同模板的额外开销可能非常严重。")]),v._v(" "),_("li",[v._v("显式实例化：\n"),_("ul",[_("li",[_("code",[v._v("extern template declaration; // 实例化声明")])]),v._v(" "),_("li",[_("code",[v._v("template declaration; // 实例化定义")])])])])]),v._v(" "),_("h3",{attrs:{id:"效率与灵活性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#效率与灵活性"}},[v._v("#")]),v._v(" 效率与灵活性")]),v._v(" "),_("h2",{attrs:{id:"模板实参推断"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模板实参推断"}},[v._v("#")]),v._v(" 模板实参推断")]),v._v(" "),_("ul",[_("li",[v._v("对函数模板，编译器利用调用中的函数实参来确定其模板参数，这个过程叫"),_("strong",[v._v("模板实参推断")]),v._v("。")])]),v._v(" "),_("h3",{attrs:{id:"类型转换与模板类型参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型转换与模板类型参数"}},[v._v("#")]),v._v(" 类型转换与模板类型参数")]),v._v(" "),_("ul",[_("li",[v._v("能够自动转换类型的只有：\n"),_("ul",[_("li",[v._v("和其他函数一样，顶层"),_("code",[v._v("const")]),v._v("会被忽略。")]),v._v(" "),_("li",[v._v("数组实参或函数实参转换为指针。")])])])]),v._v(" "),_("h3",{attrs:{id:"函数模板显式实参"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数模板显式实参"}},[v._v("#")]),v._v(" 函数模板显式实参")]),v._v(" "),_("ul",[_("li",[v._v("某些情况下，编译器无法推断出模板实参的类型。")]),v._v(" "),_("li",[v._v("定义："),_("code",[v._v("template <typename T1, typename T2, typename T3> T1 sum(T2, T3);")])]),v._v(" "),_("li",[v._v("使用函数显式实参调用："),_("code",[v._v("auto val3 = sum<long long>(i, lng); // T1是显式指定，T2和T3都是从函数实参类型推断而来")])]),v._v(" "),_("li",[_("strong",[v._v("注意")]),v._v("：正常类型转换可以应用于显式指定的实参。")])]),v._v(" "),_("h3",{attrs:{id:"尾置返回类型与类型转换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#尾置返回类型与类型转换"}},[v._v("#")]),v._v(" 尾置返回类型与类型转换")]),v._v(" "),_("ul",[_("li",[v._v("使用场景：并不清楚返回结果的准确类型，但知道所需类型是和参数相关的。")]),v._v(" "),_("li",[_("code",[v._v("template <typename It> auto fcn(It beg, It end) -> decltype(*beg)")])]),v._v(" "),_("li",[v._v("尾置返回允许我们在参数列表之后声明返回类型。")])]),v._v(" "),_("p",[v._v("标准库的"),_("strong",[v._v("类型转换")]),v._v("模板：")]),v._v(" "),_("ul",[_("li",[v._v("定义在头文件"),_("code",[v._v("type_traits")]),v._v("中。")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("对"),_("code",[v._v("Mod<T>")]),v._v("，其中"),_("code",[v._v("Mod")]),v._v("是：")]),v._v(" "),_("th",[v._v("若"),_("code",[v._v("T")]),v._v("是：")]),v._v(" "),_("th",[v._v("则"),_("code",[v._v("Mod<T>::type")]),v._v("是：")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("code",[v._v("remove_reference")])]),v._v(" "),_("td",[_("code",[v._v("X&")]),v._v("或"),_("code",[v._v("X&&")])]),v._v(" "),_("td",[_("code",[v._v("X")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("add_const")])]),v._v(" "),_("td",[_("code",[v._v("X&")]),v._v("或"),_("code",[v._v("const X")]),v._v("或函数")]),v._v(" "),_("td",[_("code",[v._v("T")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("const T")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("add_lvalue_reference")])]),v._v(" "),_("td",[_("code",[v._v("X&")])]),v._v(" "),_("td",[_("code",[v._v("T")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[_("code",[v._v("X&&")])]),v._v(" "),_("td",[_("code",[v._v("X&")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T&")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("add_rvalue_reference")])]),v._v(" "),_("td",[_("code",[v._v("X&")]),v._v("或"),_("code",[v._v("X&&")])]),v._v(" "),_("td",[_("code",[v._v("T")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T&&")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("remove_pointer")])]),v._v(" "),_("td",[_("code",[v._v("X*")])]),v._v(" "),_("td",[_("code",[v._v("X")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("add_pointer")])]),v._v(" "),_("td",[_("code",[v._v("X&")]),v._v("或"),_("code",[v._v("X&&")])]),v._v(" "),_("td",[_("code",[v._v("X*")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T*")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("make_signed")])]),v._v(" "),_("td",[_("code",[v._v("unsigned X")])]),v._v(" "),_("td",[_("code",[v._v("X")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("make_unsigned")])]),v._v(" "),_("td",[v._v("带符号类型")]),v._v(" "),_("td",[_("code",[v._v("unsigned X")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("remove_extent")])]),v._v(" "),_("td",[_("code",[v._v("X[n]")])]),v._v(" "),_("td",[_("code",[v._v("X")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T")])])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("remove_all_extents")])]),v._v(" "),_("td",[_("code",[v._v("X[n1][n2]...")])]),v._v(" "),_("td",[_("code",[v._v("X")])])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td",[v._v("否则")]),v._v(" "),_("td",[_("code",[v._v("T")])])])])]),v._v(" "),_("h3",{attrs:{id:"函数指针和实参推断"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数指针和实参推断"}},[v._v("#")]),v._v(" 函数指针和实参推断")]),v._v(" "),_("ul",[_("li",[v._v("当使用一个函数模板初始化一个函数指针或为一个函数指针赋值时，编译器使用指针的类型来推断模板实参。")])]),v._v(" "),_("h3",{attrs:{id:"模板实参推断和引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模板实参推断和引用"}},[v._v("#")]),v._v(" 模板实参推断和引用")]),v._v(" "),_("ul",[_("li",[v._v("从左值引用函数推断类型：若形如"),_("code",[v._v("T&")]),v._v("，则只能传递给它一个左值。但如果是"),_("code",[v._v("const T&")]),v._v("，则可以接受一个右值。")]),v._v(" "),_("li",[v._v("从右值引用函数推断类型：若形如"),_("code",[v._v("T&&")]),v._v("，则只能传递给它一个右值。")]),v._v(" "),_("li",[v._v("引用折叠和右值引用参数：\n"),_("ul",[_("li",[v._v("规则1：当我们将一个左值传递给函数的右值引用参数，且右值引用指向模板类型参数时（如"),_("code",[v._v("T&&")]),v._v("），编译器会推断模板类型参数为实参的左值引用类型。")]),v._v(" "),_("li",[v._v("规则2：如果我们间接创造一个引用的引用，则这些引用形成了"),_("strong",[v._v("折叠")]),v._v("。折叠引用只能应用在间接创造的引用的引用，如类型别名或模板参数。对于一个给定类型"),_("code",[v._v("X")]),v._v("：\n"),_("ul",[_("li",[_("code",[v._v("X& &")]),v._v("、"),_("code",[v._v("X& &&")]),v._v("和"),_("code",[v._v("X&& &")]),v._v("都折叠成类型"),_("code",[v._v("X&")]),v._v("。")]),v._v(" "),_("li",[v._v("类型"),_("code",[v._v("X&& &&")]),v._v("折叠成"),_("code",[v._v("X&&")]),v._v("。")])])]),v._v(" "),_("li",[v._v("上面两个例外规则导致两个重要结果：\n"),_("ul",[_("li",[v._v("1.如果一个函数参数是一个指向模板类型参数的右值引用（如"),_("code",[v._v("T&&")]),v._v("），则它可以被绑定到一个左值上；")]),v._v(" "),_("li",[v._v("2.如果实参是一个左值，则推断出的模板实参类型将是一个左值引用，且函数参数将被实例化为一个左值引用参数（"),_("code",[v._v("T&")]),v._v("）。")])])])])])]),v._v(" "),_("h3",{attrs:{id:"理解std-move"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#理解std-move"}},[v._v("#")]),v._v(" 理解std::move")]),v._v(" "),_("ul",[_("li",[v._v("标准库"),_("code",[v._v("move")]),v._v("函数是使用右值引用的模板的一个很好的例子。")]),v._v(" "),_("li",[v._v("从一个左值"),_("code",[v._v("static_cast")]),v._v("到一个右值引用是允许的。")])]),v._v(" "),_("div",{staticClass:"language-cpp line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("template")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("typename")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("T")]),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("typename")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("remove_reference")]),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("T"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),_("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[v._v("::")]),v._v("type"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("&&")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("move")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("T"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("&&")]),v._v(" t"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("static_cast")]),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("typename")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("remove_reference")]),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("T"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),_("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[v._v("::")]),v._v("type"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("&&")]),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("t"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br")])]),_("h3",{attrs:{id:"转发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#转发"}},[v._v("#")]),v._v(" 转发")]),v._v(" "),_("ul",[_("li",[v._v("使用一个名为"),_("code",[v._v("forward")]),v._v("的新标准库设施来传递参数，它能够保持原始实参的类型。")]),v._v(" "),_("li",[v._v("定义在头文件"),_("code",[v._v("utility")]),v._v("中。")]),v._v(" "),_("li",[v._v("必须通过显式模板实参来调用。")]),v._v(" "),_("li",[_("code",[v._v("forward")]),v._v("返回显式实参类型的右值引用。即，"),_("code",[v._v("forward<T>")]),v._v("的返回类型是"),_("code",[v._v("T&&")]),v._v("。")])]),v._v(" "),_("h2",{attrs:{id:"重载与模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重载与模板"}},[v._v("#")]),v._v(" 重载与模板")]),v._v(" "),_("ul",[_("li",[v._v("多个可行模板：当有多个重载模板对一个调用提供同样好的匹配时，会选择最特例化的版本。")]),v._v(" "),_("li",[v._v("非模板和模板重载：对于一个调用，如果一个非函数模板与一个函数模板提供同样好的匹配，则选择非模板版本。")])]),v._v(" "),_("h2",{attrs:{id:"可变参数模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可变参数模板"}},[v._v("#")]),v._v(" 可变参数模板")]),v._v(" "),_("p",[_("strong",[v._v("可变参数模板")]),v._v("就是一个接受可变数目参数的模板函数或模板类。")]),v._v(" "),_("ul",[_("li",[v._v("可变数目的参数被称为参数包。\n"),_("ul",[_("li",[v._v("模板参数包：标识另个或多个模板参数。")]),v._v(" "),_("li",[v._v("函数参数包：标识另个或者多个函数参数。")])])]),v._v(" "),_("li",[v._v("用一个省略号来指出一个模板参数或函数参数，表示一个包。")]),v._v(" "),_("li",[_("code",[v._v("template <typename T, typename... Args>")]),v._v("，"),_("code",[v._v("Args")]),v._v("第一个模板参数包。")]),v._v(" "),_("li",[_("code",[v._v("void foo(const T &t, const Args& ... rest);")]),v._v("，"),_("code",[v._v("rest")]),v._v("是一个函数参数包。")]),v._v(" "),_("li",[_("code",[v._v("sizeof...")]),v._v("运算符，返回参数的数目。")])]),v._v(" "),_("h3",{attrs:{id:"编写可变参数函数模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编写可变参数函数模板"}},[v._v("#")]),v._v(" 编写可变参数函数模板")]),v._v(" "),_("ul",[_("li",[v._v("可变参数函数通常是递归的：第一步调用处理包中的第一个实参，然后用剩余实参调用自身。")])]),v._v(" "),_("h3",{attrs:{id:"包扩展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#包扩展"}},[v._v("#")]),v._v(" 包扩展")]),v._v(" "),_("ul",[_("li",[v._v("对于一个参数包，除了获取它的大小，唯一能做的事情就是"),_("strong",[v._v("扩展")]),v._v("（expand）。")]),v._v(" "),_("li",[v._v("扩展一个包时，还要提供用于每个扩展元素的"),_("strong",[v._v("模式")]),v._v("（pattern）。")])]),v._v(" "),_("h3",{attrs:{id:"转发参数包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#转发参数包"}},[v._v("#")]),v._v(" 转发参数包")]),v._v(" "),_("ul",[_("li",[v._v("新标准下可以组合使用可变参数模板和"),_("code",[v._v("forward")]),v._v("机制，实现将实参不变地传递给其他函数。")])]),v._v(" "),_("h2",{attrs:{id:"模板特例化（specializations）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模板特例化（specializations）"}},[v._v("#")]),v._v(" 模板特例化（Specializations）")]),v._v(" "),_("ul",[_("li",[v._v("定义函数模板特例化：关键字"),_("code",[v._v("template")]),v._v("后面跟一个空尖括号对（"),_("code",[v._v("<>")]),v._v("）。")]),v._v(" "),_("li",[v._v("特例化的本质是实例化一个模板，而不是重载它。特例化不影响函数匹配。")]),v._v(" "),_("li",[v._v("模板及其特例化版本应该声明在同一个头文件中。所有同名模板的声明应该放在前面，然后是特例化版本。")]),v._v(" "),_("li",[v._v("我们可以部分特例化类模板，但不能部分特例化函数模板。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);