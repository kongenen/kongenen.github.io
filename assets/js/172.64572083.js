(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{493:function(t,s,a){"use strict";a.r(s);var n=a(11),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"目标："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目标："}},[t._v("#")]),t._v(" 目标：")]),t._v(" "),s("ul",[s("li",[t._v("使用分水岭算法使用基于标记的图像分割")]),t._v(" "),s("li",[t._v("函数："),s("code",[t._v("cv.watershed()")])])]),t._v(" "),s("h2",{attrs:{id:"理论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理论"}},[t._v("#")]),t._v(" 理论")]),t._v(" "),s("p",[t._v("任何灰度图像都可以看作是地形表面，其中高强度表示峰和丘陵，而低强度表示山谷。你开始用不同颜色的水（标签）填充每个孤立的山谷（局部最小值）。随着水的上升，取决于附近的峰值（梯度），来自不同山谷的水，明显具有不同的颜色将开始融合。为避免这种情况，你需要在水合并的位置建立障碍。你继续填补水和建筑障碍的工作，直到所有的山峰都在水下。然后，你创建的障碍将为你提供分割结果。这是分水岭背后的“哲学”。你可以访问分水岭上的CMM网页，以便在某些动画的帮助下了解它。")]),t._v(" "),s("p",[t._v("但是，由于噪声或图像中的任何其他不规则性，此方法会为你提供过度调整结果。因此，OpenCV实现了一个基于标记的分水岭算法，你可以在其中指定哪些是要合并的谷点，哪些是不合并的。它是一种交互式图像分割。我们所做的是为我们所知道的对象提供不同的标签。用一种颜色（或强度）标记我们确定为前景或对象的区域，用另一种颜色标记我们确定为背景或非对象的区域，最后标记我们不确定的区域，用0标记它。这是我们的标记。然后应用分水岭算法。然后我们的标记将使用我们给出的标签进行更新，对象的边界将具有-1的值。")]),t._v(" "),s("h2",{attrs:{id:"代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),s("p",[t._v("下面我们将看到一个如何使用距离变换和分水岭来分割相互接触的物体的示例。")]),t._v(" "),s("p",[t._v("考虑下面的硬币图像，硬币互相接触。即使你达到阈值，它也会相互接触。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.opencv.org/4.0.0/water_coins.jpg",alt:"image76"}})]),t._v(" "),s("p",[t._v("我们首先找到硬币的近似估计值。 为此，我们可以使用Otsu的二值化。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" cv2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" cv\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" matplotlib "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pyplot "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" plt\nimg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("imread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'coins.png'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cvtColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("COLOR_BGR2GRAY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thresh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threshold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("THRESH_BINARY_INV"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("THRESH_OTSU"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("窗口将如下图显示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.opencv.org/4.0.0/water_thresh.jpg",alt:"image77"}})]),t._v(" "),s("p",[t._v("现在我们需要去除图像中的任何小白噪声。为此，我们可以使用形态开放。要移除对象中的任何小孔，我们可以使用形态学闭合。所以，现在我们确切地知道靠近物体中心的区域是前景，而远离物体的区域是背景。只有我们不确定的区域是硬币的边界区域。")]),t._v(" "),s("p",[t._v("所以我们需要提取我们确定它们是硬币的区域。侵蚀消除了边界像素。所以无论如何，我们可以肯定它是硬币。如果物体没有相互接触，这将起作用。但由于它们相互接触，另一个好的选择是找到距离变换并应用适当的阈值。接下来我们需要找到我们确定它们不是硬币的区域。为此，我们扩大了结果。膨胀将物体边界增加到背景。这样，我们可以确保结果中背景中的任何区域都是背景，因为边界区域已被删除。见下图。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.opencv.org/4.0.0/water_fgbg.jpg",alt:"image78"}})]),t._v(" "),s("p",[t._v("剩下的区域是我们不知道的区域，无论是硬币还是背景。 分水岭算法应该找到它。 这些区域通常围绕着前景和背景相遇的硬币边界（甚至两个不同的硬币相遇）。 我们称之为边界。 它可以从sure_bg区域中减去sure_fg区域获得。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# noise removal")]),t._v("\nkernel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ones"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uint8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nopening "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("morphologyEx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thresh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MORPH_OPEN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("kernel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iterations "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# sure background area")]),t._v("\nsure_bg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dilate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opening"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("kernel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("iterations"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Finding sure foreground area")]),t._v("\ndist_transform "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("distanceTransform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opening"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DIST_L2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sure_fg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threshold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dist_transform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.7")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dist_transform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Finding unknown region")]),t._v("\nsure_fg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uint8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sure_fg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nunknown "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subtract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sure_bg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sure_fg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("看到结果。在阈值图像中，我们得到了一些我们确定硬币的硬币区域，现在它们已经分离。 （在某些情况下，你可能只对前景分割感兴趣，而不是分离相互接触的物体。在这种情况下，你不需要使用距离变换，只需要侵蚀就足够了。侵蚀只是提取确定前景区域的另一种方法，那就是所有。）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.opencv.org/4.0.0/water_dt.jpg",alt:"image79"}})]),t._v(" "),s("p",[t._v("现在我们确定哪个是硬币区域，哪个是背景和所有。所以我们创建标记（它是一个与原始图像大小相同的数组，但是使用int32数据类型）并标记其中的区域。我们确切知道的区域（无论是前景还是背景）都标有任何正整数，但不同的整数，我们不确定的区域只是保留为零。为此，我们使用cv.connectedComponents（）。它用0标记图像的背景，然后其他对象用从1开始的整数标记。")]),t._v(" "),s("p",[t._v("但我们知道，如果背景标记为0，分水岭会将其视为未知区域。所以我们想用不同的整数来标记它。相反，我们将用0表示由未知定义的未知区域。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Marker labelling")]),t._v("\nret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" markers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connectedComponents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sure_fg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add one to all labels so that sure background is not 0, but 1")]),t._v("\nmarkers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" markers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now, mark the region of unknown with zero")]),t._v("\nmarkers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("unknown"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("查看JET色彩映射中显示的结果。 深蓝色区域显示未知区域。 肯定的硬币用不同的颜色着色。 与未知区域相比，确定背景的剩余区域以浅蓝色显示。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.opencv.org/4.0.0/water_marker.jpg",alt:"image80"}})]),t._v(" "),s("p",[t._v("现在我们的标记准备好了。 现在是最后一步的时候，应用分水岭。 然后将修改标记图像。 边界区域将标记为-1。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("markers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watershed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("markers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nimg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("markers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://docs.opencv.org/4.0.0/water_result.jpg",alt:"image81"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);