(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{446:function(_,v,t){"use strict";t.r(v);var e=t(11),d=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"第十四章-重载运算与类型转换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第十四章-重载运算与类型转换"}},[_._v("#")]),_._v(" 第十四章 重载运算与类型转换")]),_._v(" "),v("h2",{attrs:{id:"基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[_._v("#")]),_._v(" 基本概念")]),_._v(" "),v("ul",[v("li",[_._v("重载运算符是具有特殊名字的函数：由关键字"),v("code",[_._v("operator")]),_._v("和其后要定义的运算符号共同组成。")]),_._v(" "),v("li",[_._v("当一个重载的运算符是成员函数时，"),v("code",[_._v("this")]),_._v("绑定到左侧运算对象。动态运算符符函数的参数数量比运算对象的数量"),v("strong",[_._v("少一个")]),_._v("。")]),_._v(" "),v("li",[_._v("只能重载大多数的运算符，而不能发明新的运算符号。")]),_._v(" "),v("li",[_._v("重载运算符的优先级和结合律跟对应的内置运算符保持一致。")]),_._v(" "),v("li",[_._v("调用方式：\n"),v("ul",[v("li",[v("code",[_._v("data1 + data2;")])]),_._v(" "),v("li",[v("code",[_._v("operator+(data1, data2);")])])])]),_._v(" "),v("li",[_._v("是否是成员函数：\n"),v("ul",[v("li",[_._v("赋值（"),v("code",[_._v("=")]),_._v("）、下标（"),v("code",[_._v("[]")]),_._v("）、调用（"),v("code",[_._v("()")]),_._v("）和成员访问箭头（"),v("code",[_._v("->")]),_._v("）运算符必须是成员。")]),_._v(" "),v("li",[_._v("复合赋值运算符一般来说是成员。")]),_._v(" "),v("li",[_._v("改变对象状态的运算符或者和给定类型密切相关的运算符通常是成员，如递增、解引用。")]),_._v(" "),v("li",[_._v("具有对称性的运算符如算术、相等性、关系和位运算符等，通常是非成员函数。")])])])]),_._v(" "),v("p",[v("strong",[_._v("运算符")]),_._v(":")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("可以被重载")]),_._v(" "),v("th",[_._v("不可以被重载")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[v("code",[_._v("+")]),_._v(", "),v("code",[_._v("-")]),_._v(", "),v("code",[_._v("*")]),_._v(", "),v("code",[_._v("/")]),_._v(", "),v("code",[_._v("%")]),_._v(", "),v("code",[_._v("^")])]),_._v(" "),v("td",[v("code",[_._v("::")]),_._v(", "),v("code",[_._v(".*")]),_._v(", "),v("code",[_._v(".")]),_._v(", "),v("code",[_._v("? :")]),_._v(",")])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("&")]),_._v(", "),v("code",[_._v("|")]),_._v(", "),v("code",[_._v("~")]),_._v(", "),v("code",[_._v("!")]),_._v(", "),v("code",[_._v(",")]),_._v(", "),v("code",[_._v("=")])]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[v("code",[_._v("<")]),_._v(", "),v("code",[_._v(">")]),_._v(", "),v("code",[_._v("<=")]),_._v(", "),v("code",[_._v(">=")]),_._v(", "),v("code",[_._v("++")]),_._v(", "),v("code",[_._v("--")])]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[v("code",[_._v("<<")]),_._v(", "),v("code",[_._v(">>")]),_._v(", "),v("code",[_._v("==")]),_._v(", "),v("code",[_._v("!=")]),_._v(", "),v("code",[_._v("&&")]),_._v(", "),v("code",[_._v("||")])]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[v("code",[_._v("+=")]),_._v(", "),v("code",[_._v("-=")]),_._v(", "),v("code",[_._v("/=")]),_._v(", "),v("code",[_._v("%=")]),_._v(", "),v("code",[_._v("^=")]),_._v(", "),v("code",[_._v("&=")])]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("|=, "),v("code",[_._v("*=")]),_._v(", "),v("code",[_._v("<<=")]),_._v(", "),v("code",[_._v(">>=")]),_._v(", "),v("code",[_._v("[]")]),_._v(", "),v("code",[_._v("()")])]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[v("code",[_._v("->")]),_._v(", "),v("code",[_._v("->*")]),_._v(", "),v("code",[_._v("new")]),_._v(", "),v("code",[_._v("new[]")]),_._v(", "),v("code",[_._v("delete")]),_._v(", "),v("code",[_._v("delete[]")])]),_._v(" "),v("td")])])]),_._v(" "),v("h2",{attrs:{id:"输入和输出运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#输入和输出运算符"}},[_._v("#")]),_._v(" 输入和输出运算符")]),_._v(" "),v("h3",{attrs:{id:"重载输出运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重载输出运算符"}},[_._v("#")]),_._v(" 重载输出运算符<<")]),_._v(" "),v("ul",[v("li",[_._v("第一个形参通常是一个非常量的"),v("code",[_._v("ostream")]),_._v("对象的引用。非常量是因为向流中写入会改变其状态；而引用是因为我们无法复制一个"),v("code",[_._v("ostream")]),_._v("对象。")]),_._v(" "),v("li",[_._v("输入输出运算符必须是非成员函数。")])]),_._v(" "),v("h3",{attrs:{id:"重载输入运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重载输入运算符"}},[_._v("#")]),_._v(" 重载输入运算符>>")]),_._v(" "),v("ul",[v("li",[_._v("第一个形参通常是运算符将要读取的流的引用，第二个形参是将要读取到的（非常量）对象的引用。")]),_._v(" "),v("li",[_._v("输入运算符必须处理输入可能失败的情况，而输出运算符不需要。")])]),_._v(" "),v("h2",{attrs:{id:"算数和关系运算符（-、-、-、-）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算数和关系运算符（-、-、-、-）"}},[_._v("#")]),_._v(" 算数和关系运算符（+、-、*、/）")]),_._v(" "),v("ul",[v("li",[_._v("如果类同时定义了算数运算符和相关的复合赋值运算符，则通常情况下应该使用复合赋值来实现算数运算符。")])]),_._v(" "),v("h3",{attrs:{id:"相等运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相等运算符"}},[_._v("#")]),_._v(" 相等运算符==")]),_._v(" "),v("ul",[v("li",[_._v("如果定义了"),v("code",[_._v("operator==")]),_._v("，则这个类也应该定义"),v("code",[_._v("operator!=")]),_._v("。")]),_._v(" "),v("li",[_._v("相等运算符和不等运算符的一个应该把工作委托给另一个。")]),_._v(" "),v("li",[_._v("相等运算符应该具有传递性。")]),_._v(" "),v("li",[_._v("如果某个类在逻辑上有相等性的含义，则该类应该定义"),v("code",[_._v("operator==")]),_._v("，这样做可以使用户更容易使用标准库算法来处理这个类。")])]),_._v(" "),v("h3",{attrs:{id:"关系运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[_._v("#")]),_._v(" 关系运算符")]),_._v(" "),v("ul",[v("li",[_._v("如果存在唯一一种逻辑可靠的"),v("code",[_._v("<")]),_._v("定义，则应该考虑为这个类定义"),v("code",[_._v("<")]),_._v("运算符。如果同时还包含"),v("code",[_._v("==")]),_._v("，则当且晋档"),v("code",[_._v("<")]),_._v("的定义和"),v("code",[_._v("++")]),_._v("产生的结果一直时才定义"),v("code",[_._v("<")]),_._v("运算符。")])]),_._v(" "),v("h2",{attrs:{id:"赋值运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[_._v("#")]),_._v(" 赋值运算符=")]),_._v(" "),v("ul",[v("li",[_._v("我们可以重载赋值运算符。不论形参的类型是什么，赋值运算符都必须定义为成员函数。")]),_._v(" "),v("li",[_._v("赋值运算符必须定义成类的成员，复合赋值运算符通常情况下也应该这么做。这两类运算符都应该返回左侧运算对象的引用。")])]),_._v(" "),v("h2",{attrs:{id:"下标运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#下标运算符"}},[_._v("#")]),_._v(" 下标运算符[]")]),_._v(" "),v("ul",[v("li",[_._v("下标运算符必须是成员函数。")]),_._v(" "),v("li",[_._v("一般会定义两个版本：\n"),v("ul",[v("li",[_._v("1.返回普通引用。")]),_._v(" "),v("li",[_._v("2.类的常量成员，并返回常量引用。")])])])]),_._v(" "),v("h2",{attrs:{id:"递增和递减运算符（-、-）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#递增和递减运算符（-、-）"}},[_._v("#")]),_._v(" 递增和递减运算符（++、--）")]),_._v(" "),v("ul",[v("li",[_._v("定义递增和递减运算符的类应该同时定义前置版本和后置版本。")]),_._v(" "),v("li",[_._v("通常应该被定义成类的成员。")]),_._v(" "),v("li",[_._v("为了和内置版本保持一致，前置运算符应该返回递增或递减后对象的引用。")]),_._v(" "),v("li",[_._v("同样为了和内置版本保持一致，后置运算符应该返回递增或递减前对象的值，而不是引用。")]),_._v(" "),v("li",[_._v("后置版本接受一个额外的，不被使用的"),v("code",[_._v("int")]),_._v("类型的形参。因为不会用到，所以无需命名。")])]),_._v(" "),v("h2",{attrs:{id:"成员访问运算符（-、-）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#成员访问运算符（-、-）"}},[_._v("#")]),_._v(" 成员访问运算符（*、->）")]),_._v(" "),v("ul",[v("li",[_._v("箭头运算符必须是类的成员。解引用运算符通常也是类的成员，尽管并非必须如此。")]),_._v(" "),v("li",[_._v("重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的某个类的对象。")]),_._v(" "),v("li",[_._v("解引用和乘法的区别是一个是一元运算符，一个是二元运算符。")])]),_._v(" "),v("h2",{attrs:{id:"函数调用运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数调用运算符"}},[_._v("#")]),_._v(" 函数调用运算符")]),_._v(" "),v("ul",[v("li",[_._v("可以像使用函数一样，调用该类的对象。因为这样对待类同时也能存储状态，所以与普通函数相比更加灵活。")]),_._v(" "),v("li",[_._v("函数调用运算符必须是成员函数。")]),_._v(" "),v("li",[_._v("一个类可以定义多个不同版本的调用运算符，相互之间应该在参数数量或类型上有所区别。")]),_._v(" "),v("li",[_._v("如果累定义了调用运算符，则该类的对象称作"),v("strong",[_._v("函数对象")]),_._v("。")])]),_._v(" "),v("h3",{attrs:{id:"lambda是函数对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#lambda是函数对象"}},[_._v("#")]),_._v(" "),v("code",[_._v("lambda")]),_._v("是函数对象")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("lambda")]),_._v("捕获变量："),v("code",[_._v("lambda")]),_._v("产生的类必须为每个值捕获的变量建立对应的数据成员，同时创建构造函数。")])]),_._v(" "),v("h3",{attrs:{id:"标准库定义的函数对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标准库定义的函数对象"}},[_._v("#")]),_._v(" 标准库定义的函数对象")]),_._v(" "),v("p",[v("strong",[_._v("标准库函数对象")]),_._v(":")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("算术")]),_._v(" "),v("th",[_._v("关系")]),_._v(" "),v("th",[_._v("逻辑")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[v("code",[_._v("plus<Type>")])]),_._v(" "),v("td",[v("code",[_._v("equal_to<Type>")])]),_._v(" "),v("td",[v("code",[_._v("logical_and<Type>")])])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("minus<Type>")])]),_._v(" "),v("td",[v("code",[_._v("not_equal_to<Type>")])]),_._v(" "),v("td",[v("code",[_._v("logical_or<Type>")])])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("multiplies<Type>")])]),_._v(" "),v("td",[v("code",[_._v("greater<Type>")])]),_._v(" "),v("td",[v("code",[_._v("logical_not<Type>")])])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("divides<Type>")])]),_._v(" "),v("td",[v("code",[_._v("greater_equal<Type>")])]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[v("code",[_._v("modulus<Type>")])]),_._v(" "),v("td",[v("code",[_._v("less<Type>")])]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[v("code",[_._v("negate<Type>")])]),_._v(" "),v("td",[v("code",[_._v("less_equal<Type>")])]),_._v(" "),v("td")])])]),_._v(" "),v("ul",[v("li",[_._v("可以在算法中使用标准库函数对象。")])]),_._v(" "),v("h3",{attrs:{id:"可调用对象与function"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可调用对象与function"}},[_._v("#")]),_._v(" 可调用对象与function")]),_._v(" "),v("p",[v("strong",[_._v("标准库function类型")]),_._v("：")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("操作")]),_._v(" "),v("th",[_._v("解释")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[v("code",[_._v("function<T> f;")])]),_._v(" "),v("td",[v("code",[_._v("f")]),_._v("是一个用来存储可调用对象的空"),v("code",[_._v("function")]),_._v("，这些可调用对象的调用形式应该与类型"),v("code",[_._v("T")]),_._v("相同。")])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("function<T> f(nullptr);")])]),_._v(" "),v("td",[_._v("显式地构造一个空"),v("code",[_._v("function")])])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("function<T> f(obj)")])]),_._v(" "),v("td",[_._v("在"),v("code",[_._v("f")]),_._v("中存储可调用对象"),v("code",[_._v("obj")]),_._v("的副本")])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("f")])]),_._v(" "),v("td",[_._v("将"),v("code",[_._v("f")]),_._v("作为条件：当"),v("code",[_._v("f")]),_._v("含有一个可调用对象时为真；否则为假。")])]),_._v(" "),v("tr",[v("td",[_._v("定义为"),v("code",[_._v("function<T>")]),_._v("的成员的类型")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[v("code",[_._v("result_type")])]),_._v(" "),v("td",[_._v("该"),v("code",[_._v("function")]),_._v("类型的可调用对象返回的类型")])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("argument_type")])]),_._v(" "),v("td",[_._v("当"),v("code",[_._v("T")]),_._v("有一个或两个实参时定义的类型。如果"),v("code",[_._v("T")]),_._v("只有一个实参，则"),v("code",[_._v("argument_type")])])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("first_argument_type")])]),_._v(" "),v("td",[_._v("第一个实参的类型")])]),_._v(" "),v("tr",[v("td",[v("code",[_._v("second_argument_type")])]),_._v(" "),v("td",[_._v("第二个实参的类型")])])])]),_._v(" "),v("ul",[v("li",[_._v("例如：声明一个"),v("code",[_._v("function")]),_._v("类型，它可以表示接受两个"),v("code",[_._v("int")]),_._v("，返回一个"),v("code",[_._v("int")]),_._v("的可调用对象。"),v("code",[_._v("function<int(int, int)>")])])]),_._v(" "),v("h2",{attrs:{id:"重载、类型转换、运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重载、类型转换、运算符"}},[_._v("#")]),_._v(" 重载、类型转换、运算符")]),_._v(" "),v("h3",{attrs:{id:"类型转换运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类型转换运算符"}},[_._v("#")]),_._v(" 类型转换运算符")]),_._v(" "),v("ul",[v("li",[_._v("类型转换运算符是类的一种特殊成员函数，它负责将一个类类型的值转换成其他类型。类型转换函数的一般形式如下："),v("code",[_._v("operator type() const;")])]),_._v(" "),v("li",[_._v("一个类型转换函数必须是类的成员函数；它不能声明返回类型，形参列表也必须为空。类型转换函数通常应该是"),v("code",[_._v("const")]),_._v("。")]),_._v(" "),v("li",[_._v("避免过度使用类型转换函数。")]),_._v(" "),v("li",[_._v("C++11引入了显式的类型转换运算符。")]),_._v(" "),v("li",[_._v("向"),v("code",[_._v("bool")]),_._v("的类型转换通常用在条件部分，因此"),v("code",[_._v("operator bool")]),_._v("一般定义成"),v("code",[_._v("explicit")]),_._v("的。")])]),_._v(" "),v("h3",{attrs:{id:"避免有二义性的类型转换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#避免有二义性的类型转换"}},[_._v("#")]),_._v(" 避免有二义性的类型转换")]),_._v(" "),v("ul",[v("li",[_._v("通常，不要为类第几个亿相同的类型转换，也不要在类中定义两个及以上转换源或转换目标是算术类型的转换。")]),_._v(" "),v("li",[_._v("在调用重载函数时，如果需要额外的标准类型转换，则该转换的级别只有当所有可行函数都请求同一个用户定义的类型转换时才有用。如果所需的用户定义的类型转换不止一个，则该调用具有二义性。")])]),_._v(" "),v("h3",{attrs:{id:"函数匹配与重载运算符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数匹配与重载运算符"}},[_._v("#")]),_._v(" 函数匹配与重载运算符")]),_._v(" "),v("ul",[v("li",[_._v("如果"),v("code",[_._v("a")]),_._v("是一种类型，则表达式"),v("code",[_._v("a sym b")]),_._v("可能是：\n"),v("ul",[v("li",[v("code",[_._v("a.operatorsym(b);")])]),_._v(" "),v("li",[v("code",[_._v("operatorsym(a,b);")])])])]),_._v(" "),v("li",[_._v("如果我们队同一个类既提供了转换目标是算术类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题。")])])])}),[],!1,null,null,null);v.default=d.exports}}]);