(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{497:function(t,s,a){"use strict";a.r(s);var n=a(11),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"目标："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目标："}},[t._v("#")]),t._v(" 目标：")]),t._v(" "),s("ul",[s("li",[t._v("了解什么是轮廓")]),t._v(" "),s("li",[t._v("学习查找轮廓，绘制轮廓")]),t._v(" "),s("li",[t._v("函数: "),s("code",[t._v("cv.findContours()")]),t._v(", "),s("code",[t._v("cv.drawContours()")])])]),t._v(" "),s("h2",{attrs:{id:"什么是轮廓？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是轮廓？"}},[t._v("#")]),t._v(" 什么是轮廓？")]),t._v(" "),s("p",[t._v("轮廓可以简单地解释为连接所有具有相同的颜色或强度的连续点（沿着边界）的曲线。轮廓是形状分析和物体检测和识别的很有用的工具。")]),t._v(" "),s("ul",[s("li",[t._v("为了更好的准确性，使用二进制图像，因此，在找到轮廓之前，应用阈值或canny边缘检测。")]),t._v(" "),s("li",[t._v("从OpenCV 3.2开始，findContours()不再修改源图像，而是将修改后的图像作为三个返回参数中的第一个返回。")]),t._v(" "),s("li",[t._v("在OpenCV中，找到轮廓就像从黑色背景中找到白色物体。所以请记住，要找到的对象应该是白色，背景应该是黑色。")])]),t._v(" "),s("p",[t._v("让我们看看如何找到二进制图像的轮廓：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" cv2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" cv\n\nim "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("imread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test.jpg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nimgray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cvtColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("im"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("COLOR_BGR2GRAY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thresh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threshold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imgray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncontours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hierarchy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findContours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thresh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RETR_TREE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CHAIN_APPROX_SIMPLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("在"),s("code",[t._v("cv.findContours()")]),t._v("函数中有三个参数，第一个是源图像，第二个是轮廓检索模式，第三个是轮廓逼近方法。它输出轮廓和层次结构。contours是图像中所有轮廓的Python列表，每个单独的轮廓是对象边界点坐标(x,y)的Numpy数组。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：我们稍后将详细讨论第二和第三个参数以及层次结构。在此之前，代码示例中给出的值对所有图像都可以正常工作。")])]),t._v(" "),s("h2",{attrs:{id:"如何绘制轮廓？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何绘制轮廓？"}},[t._v("#")]),t._v(" 如何绘制轮廓？")]),t._v(" "),s("p",[t._v("要绘制轮廓，可以使用"),s("code",[t._v("cv.drawContours")]),t._v("函数。如果图像有边界点，它也可以用于绘制任何形状。它的第一个参数是源图像，第二个参数是应该作为Python列表传递的轮廓，第三个参数是轮廓索引（在绘制单个轮廓时很有用。绘制所有轮廓，传递-1），其余参数是颜色，厚度等等")]),t._v(" "),s("p",[t._v("要绘制图像中的所有轮廓：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("drawContours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("要绘制单个轮廓，请输入四个轮廓点：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("cv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("drawContours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("但大多数时候，下面的方法会很有用：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" contours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ncv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("drawContours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("img"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[t._v("注意：最后两种方法是相同的，但是当你继续前进时，你会发现最后一种方法更有用。")])]),t._v(" "),s("h2",{attrs:{id:"轮廓近似方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轮廓近似方法"}},[t._v("#")]),t._v(" 轮廓近似方法")]),t._v(" "),s("p",[t._v("这是"),s("code",[t._v("cv.findContours")]),t._v("函数中的第三个参数。它实际上表示什么？")]),t._v(" "),s("p",[t._v("在上面，我们告诉轮廓是具有相同强度的形状的边界。它存储形状边界的（x，y）坐标。但是它存储了所有坐标吗？这由该轮廓近似方法指定。")]),t._v(" "),s("p",[t._v("如果传递"),s("code",[t._v("cv.CHAIN_APPROX_NONE")]),t._v("，则存储所有边界点。但实际上我们需要所有的积分吗？例如，你找到了直线的轮廓，你是否需要线上的所有点来表示该线？不，我们只需要该线的两个端点。这就是"),s("code",[t._v("cv.CHAIN_APPROX_SIMPLE")]),t._v("的作用。它删除所有冗余点并压缩轮廓，从而节省内存。")]),t._v(" "),s("p",[t._v("下面的矩形图像展示了这种技术。只需在轮廓阵列中的所有坐标上绘制一个圆圈（以蓝色绘制）。第一张图片显示了我用"),s("code",[t._v("cv.CHAIN_APPROX_NONE")]),t._v("（734点）获得的点数，第二张图片显示了一张带有"),s("code",[t._v("cv.CHAIN_APPROX_SIMPLE")]),t._v("（仅4点）的点数，它节省了不少内存！")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.opencv.org/4.0.0/none.jpg",alt:"image31"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);