(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{341:function(t,r,a){"use strict";a.r(r);var e=a(11),n=Object(e.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("目前搭建卷积神经网络（CNN）一般直接用 Pytorch、Tensorflow 等深度学习框架，很简单。但如果是手写反向传播过程，情况就比 多层感知机（MLP） 网络复杂多了，因为不仅仅是矩阵相乘。")]),t._v(" "),r("p",[t._v("目标是，从零开始实现 CNN。")]),t._v(" "),r("p",[t._v("刚开始，本人搜网上的卷积神经网络反向推导的相关博客，发现了几个问题：")]),t._v(" "),r("ul",[r("li",[t._v("公式看的实在脑袋疼，不好理解，一大堆的 \\sum ，变量还特别多，最后自己实现才发现，卷积的时间复杂度还挺高，好几层 for；")]),t._v(" "),r("li",[t._v("卷积层的反向传播，从输出回传的梯度 \\delta^{l} ，求输入的梯度 \\delta^{l-1} 存在一个权重矩阵 rot180 的操作，而且还需要对梯度 \\delta^{l} 填充 padding 的问题，见 "),r("a",{attrs:{href:"https://www.cnblogs.com/pinard/p/6494810.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("卷积神经网络(CNN)反向传播算法 - 刘建平Pinard - 博客园"),r("OutboundLink")],1),t._v("（刘建平老师的博客强烈推荐），如下")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://pic1.zhimg.com/v2-22c07fd885952f2f6b5f7e44ddf10e60_b.jpg",alt:""}})]),t._v(" "),r("p",[t._v("例子")]),t._v(" "),r("p",[t._v("这个例子没有错，但只是一种特殊情况，如果步长 stride 大于 1，就不仅仅是外围填充 0 了，还需要对 \\delta^{l} 数 据之间也做填充 0，具体过程和转置卷积的前向过程一模一样。但即使真的可以这样做，写对了，做 padding 消耗也是很大的，假设 stride = 2，则大约有 \\frac{3}{4} 的计算都是跟 0 做乘法，是无意义的计算，个人以为不可取，个人改用了其他思路。")]),t._v(" "),r("p",[t._v("后续一步步实现，遇到的也不仅仅这两个问题，一一克服，整个过程的关键就是——"),r("strong",[t._v("硬着头皮，老老实实画图，别看公式（因人而异）")]),t._v("。")]),t._v(" "),r("p",[t._v("整个过程中，又回顾了一些 C++ 的坑与优化技巧，对卷积的前向以及后向过程和如何搭建深度学习流程有了更清晰的认识，收获颇丰。")]),t._v(" "),r("h2",{attrs:{id:"提纲"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提纲"}},[t._v("#")]),t._v(" 提纲")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/463673933",target:"_blank",rel:"noopener noreferrer"}},[t._v("山与水你和我：卷积神经网络（一）tensor 定义"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/468161119",target:"_blank",rel:"noopener noreferrer"}},[t._v("山与水你和我：卷积神经网络（二）从图像到 tensor"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/468161821",target:"_blank",rel:"noopener noreferrer"}},[t._v("山与水你和我：卷积神经网络（三）ReLU 层"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/468163843",target:"_blank",rel:"noopener noreferrer"}},[t._v("山与水你和我：卷积神经网络（四）池化层"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/468164733",target:"_blank",rel:"noopener noreferrer"}},[t._v("山与水你和我：卷积神经网络（五）卷积层"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/468165951",target:"_blank",rel:"noopener noreferrer"}},[t._v("山与水你和我：卷积神经网络（六）Linear 线性层"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/469475509",target:"_blank",rel:"noopener noreferrer"}},[t._v("山与水你和我：卷积神经网络（七）搭建 CNN 网络结构"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/468177334",target:"_blank",rel:"noopener noreferrer"}},[t._v("山与水你和我：卷积神经网络（八）训练 CNN"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),r("h3",{attrs:{id:"环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#环境"}},[t._v("#")]),t._v(" 环境")]),t._v(" "),r("ol",[r("li",[t._v("Windows 11")]),t._v(" "),r("li",[t._v(">=C++17（"),r("a",{attrs:{href:"https://jmeubank.github.io/tdm-gcc/download/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TDM GCC 10.3.0"),r("OutboundLink")],1),t._v("）")]),t._v(" "),r("li",[t._v("OpenCV 4.5.2")]),t._v(" "),r("li",[t._v("构建工具 Cmake")])]),t._v(" "),r("h3",{attrs:{id:"数据集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据集"}},[t._v("#")]),t._v(" 数据集")]),t._v(" "),r("p",[t._v("采用的小型图像分类数据集，从 "),r("a",{attrs:{href:"https://www.kaggle.com/ashishsaxena2209/animal-image-datasetdog-cat-and-panda",target:"_blank",rel:"noopener noreferrer"}},[t._v("cat-dog-panda"),r("OutboundLink")],1),t._v(" 数据集剔除 cat（cat 和 dog 相对比较难），然后又从 "),r("a",{attrs:{href:"http://www.vision.caltech.edu/visipedia/CUB-200.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CUB-200 bird"),r("OutboundLink")],1),t._v(" 数据集中随机抽出 1000 张鸟类图像，凑成三分类的小型数据集。train : valid : test 比例 8:1:1。")]),t._v(" "),r("h3",{attrs:{id:"网络模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网络模型"}},[t._v("#")]),t._v(" 网络模型")]),t._v(" "),r("p",[t._v("本人也不知道是什么网络结构，随便设计的（能跑就行），只有卷积层、最大池化层、ReLU 层、Softmax 层、Linear 全连接层，比 AlexNet 要简单，接受的输入大小是 224x224x3，输出 3 个值，经过 softmax 得到概率，损失函数是交叉熵，优化方法是 SGD 随机梯度下降，最终在测试集上大概可以达到 0.91 的准确率，不高，但至少跑通了。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://pic3.zhimg.com/v2-eeaef253545ed6cf0cc6386cb4495442_b.jpg",alt:""}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://pic2.zhimg.com/v2-60678751387e8316873109f5c1d385e9_b.jpg",alt:""}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://pic3.zhimg.com/v2-80ca06590885c6fedaa44e3cc1c62712_b.jpg",alt:""}})]),t._v(" "),r("p",[t._v("后面虽然也写了 BatchNorm 层、DropOut 层，训练是没问题的，这俩的前向和反向传播都对，但 valid 和 test 阶段，过拟合了。。。按照网上诸多说法尝试，但都失败了，遗留问题。")]),t._v(" "),r("p",[t._v("后面还尝试了 Grad-CAM 可视化神经网络，实现跟论文里的细节些许不一样，例子如下，分类为 bird")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://pic4.zhimg.com/v2-f672a7c9d6e59af753b74f0feb0b2c93_b.jpg",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")])])}),[],!1,null,null,null);r.default=n.exports}}]);