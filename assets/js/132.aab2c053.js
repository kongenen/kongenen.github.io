(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{450:function(s,e,a){"use strict";a.r(e);var n=a(11),t=Object(n.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"第十九章-特殊工具与技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第十九章-特殊工具与技术"}},[s._v("#")]),s._v(" 第十九章 特殊工具与技术")]),s._v(" "),e("h2",{attrs:{id:"控制内存分配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制内存分配"}},[s._v("#")]),s._v(" 控制内存分配")]),s._v(" "),e("h3",{attrs:{id:"重载new和delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重载new和delete"}},[s._v("#")]),s._v(" 重载new和delete")]),s._v(" "),e("ul",[e("li",[e("strong",[e("code",[s._v("new")]),s._v("表达式的工作机理")]),s._v("：")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('string *sp = new string("a value"); //分配并初始化一个string对象\nstring *arr = new string[10];   // 分配10个默认初始化的string对象\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[e("p",[s._v("上述代码实际执行了"),e("strong",[s._v("三步操作")]),s._v("：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("new")]),s._v("表达式调用一个名为"),e("code",[s._v("operator new")]),s._v("(或"),e("code",[s._v("operator new []")]),s._v(")的标准库函数，它分配一块"),e("strong",[s._v("足够大的")]),s._v("、"),e("strong",[s._v("原始的")]),s._v("、"),e("strong",[s._v("未命名的")]),s._v("内存空间以便存储特定类型的对象(或对象的数组)。")]),s._v(" "),e("li",[s._v("编译器运行相应的构造函数以构造这些对象，并为其传入初始值。")]),s._v(" "),e("li",[s._v("对象被分配了空间并构造完成，返回一个指向该对象的指针。")])])]),s._v(" "),e("li",[e("p",[e("strong",[e("code",[s._v("delete")]),s._v("表达式的工作机理")]),s._v("：")])])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("delete sp;  // 销毁*sp，然后释放sp指向的内存空间\ndelete [] arr;  // 销毁数组中的元素，然后释放对应的内存空间\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("上述代码实际执行了"),e("strong",[s._v("两步操作")]),s._v("：\n"),e("ul",[e("li",[s._v("对"),e("code",[s._v("sp")]),s._v("所指向的对象或者"),e("code",[s._v("arr")]),s._v("所指的数组中的元素执行对应的析构函数。")]),s._v(" "),e("li",[s._v("编译器调用名为"),e("code",[s._v("operator delete")]),s._v("(或"),e("code",[s._v("operator delete[]")]),s._v(")的标准库函数释放内存空间。")])])]),s._v(" "),e("li",[s._v("当自定义了全局的"),e("code",[s._v("operator new")]),s._v("函数和"),e("code",[s._v("operator delete")]),s._v("函数后，我们就担负起了控制动态内存分配的职责。这两个函数"),e("strong",[s._v("必须是正确的")]),s._v("。因为它们是程序整个处理过程中至关重要的一部分。")]),s._v(" "),e("li",[s._v("标准库定义了"),e("code",[s._v("operator new")]),s._v("函数和"),e("code",[s._v("operator delete")]),s._v("函数的8个重载版本：")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 这些版本可能抛出异常\nvoid *operator new(size_t); // 分配一个对象\nvoid *operator new[](size_t);   // 分配一个数组\nvoid *operator delete(void*) noexcept;  // 释放一个对象\nvoid *operator delete[](void*) noexcept;    // 释放一个数组\n\n// 这些版本承诺不会抛出异常\nvoid *operator new(size_t, nothrow_t&) noexcept;\nvoid *operator new[](size_t, nothrow_t&) noexcept;\nvoid *operator delete(void*, nothrow_t&) noexcept;\nvoid *operator delete[](void*, nothrow_t&) noexcept;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("ul",[e("li",[s._v("应用程序可以自定义上面函数版本中的任意一个，前提是自定义的版本必须位于"),e("strong",[s._v("全局作用域")]),s._v("或者"),e("strong",[s._v("类作用域")]),s._v("中。")]),s._v(" "),e("li",[e("strong",[s._v("注意：")]),s._v(" 提供新的"),e("code",[s._v("operator new")]),s._v("函数和"),e("code",[s._v("operator delete")]),s._v("函数的目的在于改变内存分配的方式，但是不管怎样，都不能改变"),e("code",[s._v("new")]),s._v("运算符和"),e("code",[s._v("delete")]),s._v("运算符的基本含义。")]),s._v(" "),e("li",[s._v("使用从C语言继承的函数"),e("code",[s._v("malloc")]),s._v("和"),e("code",[s._v("free")]),s._v("函数能实现以某种方式执行分配内存和释放内存的操作：")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("#include <cstdlib>\n\nvoid *operator new(size_t size) {\n    if(void *mem = malloc(size))\n        return mme;\n    else\n        throw bad_alloc();\n}\n\nvoid operator delete(void *mem) noexcept {\n    free(mem);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h3",{attrs:{id:"定位new表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定位new表达式"}},[s._v("#")]),s._v(" 定位new表达式")]),s._v(" "),e("ul",[e("li",[s._v("应该使用new的定位"),e("code",[s._v("new(placement new)")]),s._v("形式传递一个地址，定位"),e("code",[s._v("new")]),s._v("的形式如下：")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("new (place_address) type\nnew (place_address) type (initializers)\nnew (place_address) type [size]\nnew (place_address) type [size] {braced initializer list}\n// place_address必须是一个指针，同时在initializers中提供一个(可能为空的)以逗号分隔的初始值列表，该初始值列表将用于构造新分配的对象。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("当只传入一个指针类型的实参时，定位"),e("code",[s._v("new")]),s._v("表达式构造对象但是不分配内存。")]),s._v(" "),e("li",[s._v("调用析构函数会销毁对象，但是不会释放内存。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('string *sp = new string("a value"); // 分配并初始化一个string对象\nsp->~string();\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"运行时类型识别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行时类型识别"}},[s._v("#")]),s._v(" 运行时类型识别")]),s._v(" "),e("ul",[e("li",[s._v("运行时类型识别"),e("code",[s._v("(run-time type identification, RTTI)")]),s._v("的功能由两个运算符实现：\n"),e("ul",[e("li",[e("code",[s._v("typeid")]),s._v("运算符， 用于返回表达式的类型。")]),s._v(" "),e("li",[e("code",[s._v("dynamic_cast")]),s._v("运算符，用于将基类的指针或引用安全地转换曾派生类的指针或引用。")])])]),s._v(" "),e("li",[s._v("使用"),e("code",[s._v("RTTI")]),s._v("必须要加倍小心。在可能的情况下，最好定义虚函数而非直接接管类型管理的重任。")])]),s._v(" "),e("h3",{attrs:{id:"dynamic-cast运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-cast运算符"}},[s._v("#")]),s._v(" dynamic_cast运算符")]),s._v(" "),e("ul",[e("li",[s._v("dynamic_cast运算符的使用形式如下：")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("dynamic_cast<type*>(e)  // e必须是一个有效的指针\ndynamic_cast<type&>(e)  // e必须是一个左值\ndynamic_cast<type&&>(e) // e不能是左值\n// 以上，type类型必须时一个类类型，并且通常情况下该类型应该含有虚函数。\n// e的类型必须符合三个条件中的任意一个，它们是：\n// 1. e的类型是目标type的公有派生类；\n// 2. e的类型是目标type的共有基类；\n// 3. e的类型就是目标type的类型；\n\n// 指针类型的dynamic_cast\n// 假设Base类至少含有一个虚函数，Derived是Base的共有派生类。\nif (Derived *dp = dynamic_cast<Derived*>(bp)) {\n    // 使用dp指向的Derived对象\n} else {    // bp指向一个Base对象\n    // 使用dp指向的Base对象\n}\n\n// 引用类型的dynamic_cast\nvoid f(const Base &b) {\n    try {\n        const Derived &d = dynamic_cast<const Derived&>(b);\n        // 使用b引用的Derived对象\n    } catch (bad_cast) {\n        // 处理类型转换失败的情况\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("ul",[e("li",[s._v("可以对一个空指针执行"),e("code",[s._v("dynamic_cast")]),s._v("，结果是所需类型的空指针。")])]),s._v(" "),e("h3",{attrs:{id:"typeid运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typeid运算符"}},[s._v("#")]),s._v(" typeid运算符")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("typeid运算符(typeid operator)")]),s._v("，它允许程序向表达式提问："),e("strong",[s._v("你的对象是什么类型？")])]),s._v(" "),e("li",[e("code",[s._v("typeid")]),s._v("表达式的形式是"),e("code",[s._v("typeid(e)")]),s._v("，其中"),e("code",[s._v("e")]),s._v("可以是任意表达式或类型的名字，它操作的结果是一个常量对象的引用。它可以作用于任意类型的表达式。")]),s._v(" "),e("li",[s._v("通常情况下，使用typeid比较两条表达式的类型是否相同，或者比较一条表达式的类型是否与指定类型相同：")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Derived *dp = new Derived;\nBase *bp = dp;\n\nif (typeid(*bp) == typeid(*dp)) {\n    // bp和dp指向同一类型的对象\n}\n\nif (typeid(*bp) == typeid(Derived)) {\n    // bp实际指向Derived对象\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("ul",[e("li",[s._v("当typeid作用于指针时(而非指针所指向的对象)，返回的结果是该指针的静态编译时类型。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 下面的检查永远是失败的：bp的类型是指向Base的指针\nif (typeid(bp) == typeid(Derived)) {\n    // 永远不会执行\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"使用rtti"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用rtti"}},[s._v("#")]),s._v(" 使用RTTI")]),s._v(" "),e("ul",[e("li",[s._v("用途：为具有继承关系的类实现相等运算符时。对于两个对象来说，如果它们的类型相同并且对应的数据成员取值相同，则说这两个对象是相等的。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 类的层次关系\nclass Base {\n    friend bool operator==(const Base&, const Base&);\npublic:\n    // Base的接口成员\nprotected:\n    virtual bool equal(const Base&) const;\n    // Base的数据成员和其他用于实现的成员\n};\n\nclass Derived: public Base {\npublic:\n    // Derived的其他接口成员\nprotected:\n    bool equal(const Base&) const;\n    // Derived的数据成员和其他用于实现的成员\n};\n\n// 类型敏感的相等运算符\nbool operator==(const Base &lhs, const Base &rhs) {\n    // 如果typeid不相同，返回false；否则虚调用equal\n    return typeid(lhs) == typeid(rhs) && lhs.equal(rhs);\n}\n\n// 虚equal函数\nbool Derived::equal(const Base &rhs) const {\n    auto r = dynamic_cast<const Derived&>(rhs);\n    // 执行比较两个Derived对象的操作并返回结果\n}\n\n// 基类equal函数\nbool Base::equal(const Base &rhs) const {\n    // 执行比较Base对象的操作\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("h3",{attrs:{id:"type-info类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type-info类"}},[s._v("#")]),s._v(" type_info类")]),s._v(" "),e("h2",{attrs:{id:"枚举类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[s._v("#")]),s._v(" 枚举类型")]),s._v(" "),e("ul",[e("li",[s._v("枚举类型"),e("code",[s._v("(enumeration)")]),s._v("使我们可以将一组整型常量组织在一起。枚举属于字面值常量类型。")]),s._v(" "),e("li",[e("strong",[s._v("限定作用域的枚举类型(scoped enumeration)")]),s._v("：首先是关键字"),e("code",[s._v("enum class(或enum struct)")]),s._v("，随后是枚举类型名字以及用花括号括起来的以逗号分隔的枚举成员列表，最后是一个分号。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("enum class open_modes {input, output, append};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("不限定作用域的枚举类型"),e("code",[s._v("(unscoped enumeration)")]),s._v("：省略关键字"),e("code",[s._v("class(或struct)")]),s._v("，枚举类型的名字是可选的。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("enum color {red, yellow, green};\n\nenum {floatPrec = 6, doublePrec = 10, double_doublePrec = 10};\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"类成员指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类成员指针"}},[s._v("#")]),s._v(" 类成员指针")]),s._v(" "),e("p",[e("strong",[s._v("成员指针")]),s._v("：指可以指向类的非静态成员的指针。")]),s._v(" "),e("h3",{attrs:{id:"数据成员指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据成员指针"}},[s._v("#")]),s._v(" 数据成员指针")]),s._v(" "),e("ul",[e("li",[s._v("和其他指针一样，在声明成员指针时也使用*来表示当前声明的名字是一个指针。与普通指针不同的时，成员指针还必须包含成员所属的类。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// pdata可以指向一个常量(非常量)Screen对象的string成员\nconst string Screen::*pdata;\n\n// C++11\nauto pdata = &Screen::contents;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("当我们初始化一个成员指针或为成员指针赋值时，该指针没有指向任何数据。成员指针指定了成员而非该成员所属的对象，只有当解引用成员指针时才提供对象的信息。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Screen myScreen, *pScreen = &myScreen;\n\nauto s = myScreen.*pdata;\n\ns = pScreen->*pdata;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"成员函数指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员函数指针"}},[s._v("#")]),s._v(" 成员函数指针")]),s._v(" "),e("ul",[e("li",[s._v("因为函数调用运算符的优先级较高，所以在声明指向成员函数的指针并使用这些的指针进行函数调用时，括号必不可少："),e("code",[s._v("(C::*p)(parms)")]),s._v("和"),e("code",[s._v("(obj.*p)(args)")]),s._v("。")])]),s._v(" "),e("h3",{attrs:{id:"将成员函数用作可调用对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将成员函数用作可调用对象"}},[s._v("#")]),s._v(" 将成员函数用作可调用对象")]),s._v(" "),e("h2",{attrs:{id:"嵌套类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#嵌套类"}},[s._v("#")]),s._v(" 嵌套类")]),s._v(" "),e("ul",[e("li",[s._v("一个类可以定义在另一个类的内部，前者称为嵌套类(nested class)或嵌套类型(nested type)。"),e("strong",[s._v("嵌套类常用于定义作为实现部分的类")]),s._v("。")]),s._v(" "),e("li",[s._v("嵌套类是一个独立的类，与外层类基本没有什么关系。特别是，外层类的对象和嵌套类的对象是相互独立的。")]),s._v(" "),e("li",[s._v("嵌套类的名字在外层类作用域中是可见的，在外层类作用域之外不可见。")])]),s._v(" "),e("h2",{attrs:{id:"union：一种节省空间的类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#union：一种节省空间的类"}},[s._v("#")]),s._v(" union：一种节省空间的类")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("联合(union)")]),s._v("是一种特殊的类。一个"),e("code",[s._v("union")]),s._v("可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。"),e("strong",[s._v("它不能含有引用类型的成员和虚函数")]),s._v("。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// Token类型的对象只有一个成员，该成员的类型可能是下列类型中的任意一种\nunion Token {\n    // 默认情况下成员是共有的\n    char cval;\n    int ival;\n    double dval;\n}；\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("匿名union(anonymous union)")]),s._v("是一个未命名的"),e("code",[s._v("union")]),s._v("，并且在右花括号和分号之间没有任何声明。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("union {\n    char cval;\n    int ival;\n    double dval;\n};\n\n// 可以直接访问它的成员\ncal = 'c';\nival = 42;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("注意：")]),s._v(" "),e("code",[s._v("匿名union")]),s._v("不能包含受保护的成员或私有成员，也不能定义成员函数。")])]),s._v(" "),e("h2",{attrs:{id:"局部类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#局部类"}},[s._v("#")]),s._v(" 局部类")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("局部类(local class)")]),s._v("：可以定义在某个函数的内部的类。它的类型只在定义它的作用域内可见。和嵌套类不同，局部类的成员受到严格限制。")]),s._v(" "),e("li",[s._v("局部类的所有成员(包括函数在内)都必须完整定义在类的内部。因此，局部类的作用与嵌套类相比相差很远。")]),s._v(" "),e("li",[e("strong",[s._v("局部类不能使用函数作用域中的变量。")])])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("int a, val;\nvoid foo(int val) {\n    static inti si;\n    enum loc { a = 1024, b};\n\n    // Bar是foo的局部类\n    struct Bar {\n        Loc locVal; // 正确：使用一个局部类型名\n        int barVal;\n\n        void fooBar(Loc l = a) {    // 正确：默认实参是Loc::a\n            barVal = val;   // 错误：val是foo的局部变量\n            barVal == ::val;    // 正确：使用一个全局对象\n            barVal = si;    // 正确：使用一个静态局部对象\n            locVal = b; // 正确：使用一个枚举成员\n        }\n    }；\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("h2",{attrs:{id:"固有的不可移植的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#固有的不可移植的特性"}},[s._v("#")]),s._v(" 固有的不可移植的特性")]),s._v(" "),e("p",[s._v("所谓不可移植的特性是指"),e("strong",[s._v("因机器而异的特性")]),s._v("，当将含有不可移植特性的程序从一台机器转移到另一台机器上时，通常需要重新编写该程序。")]),s._v(" "),e("h3",{attrs:{id:"位域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位域"}},[s._v("#")]),s._v(" 位域")]),s._v(" "),e("ul",[e("li",[s._v("类可以将其(非静态)数据成员定义成"),e("strong",[s._v("位域(bit-field)")]),s._v("，在一个位域中含有一定数量的二进制位。当一个程序需要向其他程序或硬件设备传递二进制数据时，通常会用到位域。")]),s._v(" "),e("li",[s._v("位域在内存中的布局是与机器相关的。")]),s._v(" "),e("li",[s._v("位域的类型必须是整型或枚举类型。因为带符号位域的行为是由具体实现确定的，通常情况下我们使用无符号类型保存一个位域。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("typedef unsigned int Bit;\nclass File {\n    Bit mode: 2;\n    Bit modified: 1;\n    Bit prot_owner: 3;\n    Bit prot_group: 3;\n    Bit prot_world: 3;\npublic:\n    enum modes {READ = 01, WRITE = 02, EXECUTE = 03};\n    File &open(modes);\n    void close();\n    void write();\n    bool isRead() const;\n    void setWrite();\n}\n\n// 使用位域\nvoid File::write() {\n    modified = 1;\n    // ...\n}\n\nvoid File::close() {\n    if( modified)\n        // ...保存内容\n}\n\nFile &File::open(File::modes m) {\n    mode |= READ;   // 按默认方式设置READ\n    // 其他处理\n    if(m & WRITE)   // 如果打开了READ和WRITE\n        // 按照读/写方式打开文件\n    return *this;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("h3",{attrs:{id:"volatile限定符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile限定符"}},[s._v("#")]),s._v(" volatile限定符")]),s._v(" "),e("ul",[e("li",[s._v("当对象的值可能在程序的控制或检测之外被改变时，应该将该对象声明为"),e("code",[s._v("volatile")]),s._v("。关键字"),e("code",[s._v("volatile")]),s._v("告诉编译器不应对这样的对象进行优化。")]),s._v(" "),e("li",[e("code",[s._v("const")]),s._v("和"),e("code",[s._v("volatile")]),s._v("的一个重要区别是不能使用合成的拷贝/移动构造函数及赋值运算符初始化"),e("code",[s._v("volatile")]),s._v("对象或者从"),e("code",[s._v("volatile")]),s._v("对象赋值。")])]),s._v(" "),e("h3",{attrs:{id:"链接指示：extern-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#链接指示：extern-c"}},[s._v("#")]),s._v(' 链接指示：extern "C"')]),s._v(" "),e("ul",[e("li",[e("code",[s._v("C++")]),s._v("使用"),e("code",[s._v("链接指示(linkage directive)")]),s._v("指出任意非"),e("code",[s._v("C++")]),s._v("函数所用的语言。")]),s._v(" "),e("li",[s._v("要想把"),e("code",[s._v("C++")]),s._v("代码和其他语言(包括"),e("code",[s._v("C")]),s._v("语言)编写的代码放在一起使用，要求我们必须有权访问该语言的编译器，并且这个编译器与当前的"),e("code",[s._v("C++")]),s._v("编译器是兼容的。")]),s._v(" "),e("li",[e("code",[s._v("C++")]),s._v("从C语言继承的标准库函数可以定义为"),e("code",[s._v("C")]),s._v("函数，但并非必须：决定使用"),e("code",[s._v("C")]),s._v("还是"),e("code",[s._v("C++")]),s._v("实现的"),e("code",[s._v("C")]),s._v("标准库，是每个"),e("code",[s._v("C++")]),s._v("实现的事情。")]),s._v(" "),e("li",[s._v("有时需要在C和C++中编译同一个源文件，为了实现这一目的，在编译C++版本的程序时预处理器定义"),e("code",[s._v("__cplusplus")]),s._v("。")])]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#ifdef __cplusplus\nextern "C"\n#endif\nint strcmp(const char*, const char*);\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);